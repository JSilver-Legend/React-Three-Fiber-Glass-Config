{"mappings":"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","sources":["app/js/AppApi.js","app/js/Loader.js","app/js/views/InitialView.js","app/js/views/Sections.js","app/js/views/LoaderView.js","app/js/components/FPSCounter.js","app/js/MainApplication.js","app/js/components/DatGui.js","app/js/components/SceneController.js","app/js/camera_controller/CameraController.js","app/js/camera_controller/states/CameraViewState.js","app/js/camera_controller/movement_mode/ImmediateMode.js","app/js/camera_controller/movement_mode/CameraMovementMode.js","app/js/camera_controller/states/CameraStandardState.js","app/js/camera_controller/states/CameraSimpleState.js","app/js/views/HomeView.js","app/js/components/Structure.js","app/js/components/GenericGlass.js","app/js/materials/GlassFrontMaterial.js","app/js/shaders/GlassFrontShader.frag","app/js/shaders/GlassFrontShader.vert","app/js/materials/GlassBackMaterial.js","app/js/shaders/GlassBackShader.frag","app/js/shaders/GlassBackShader.vert","app/js/materials/GlassSideMaterial.js","app/js/shaders/GlassSideShader.frag","app/js/components/GenericStructureElement.js","app/js/materials/AluminiumTapeMaterial.js","app/js/components/Tape.js","app/js/components/Spacer.js","app/js/materials/InsulationMaterial.js","app/js/shaders/InsulationShader.frag","app/js/shaders/InsulationShader.vert","app/js/components/SpacerSegment.js","app/js/components/SpacerCorner.js","app/js/components/Sun.js","app/js/components/Sky.js"],"sourcesContent":["import { Graphics, ResourceBatch } from 'ohzi-core';\nimport { RenderLoop } from 'ohzi-core';\nimport { Configuration } from 'ohzi-core';\nimport { EventManager } from 'ohzi-core';\nimport { Debug } from 'ohzi-core';\nimport { Initializer } from 'ohzi-core';\nimport { ResourceContainer } from 'ohzi-core';\nimport Loader from './Loader';\n\n// APP\nimport MainApplication from './MainApplication';\n\nclass AppApi\n{\n  init()\n  {\n    this.application = new MainApplication();\n    this.loader = new Loader(this);\n\n    this.render_loop = new RenderLoop(this.loader, Graphics);\n    this.config = Configuration;\n\n    let app_container = document.querySelector('.webgl-canvas');\n    let canvas = document.querySelector('.webgl-canvas');\n\n    Initializer.init(canvas, app_container, {\n      antialias: true,\n      logarithmicDepthBuffer: true,\n    });\n    Configuration.dpr = window.devicePixelRatio;\n    this.application.init(Graphics);\n  }\n\n  load(settings)\n  {\n    this.init();\n\n    window.app = this.application;\n    window.ViewApi = this;\n    window.settings = settings;\n\n    this.loader.load();\n  }\n\n  dispose()\n  {\n    this.application.dispose();\n    Initializer.dispose(this.render_loop);\n  }\n\n  draw_debug_axis()\n  {\n    Debug.draw_axis();\n  }\n\n  register_event(name, callback)\n  {\n    EventManager.on(name, callback);\n  }\n\n  set_resource(name, resource)\n  {\n    ResourceContainer.set_resource(name, resource);\n  }\n\n  set_settings(settings)\n  {\n    window.settings = settings;\n  }\n\n  start_main_app()\n  {\n    this.render_loop.set_state(this.application);\n  }\n\n  start()\n  {\n    this.render_loop.start();\n  }\n\n  stop()\n  {\n    this.render_loop.stop();\n  }\n\n  take_screenshot(callback)\n  {\n    Graphics.take_screenshot(callback);\n  }\n\n  download_blob(blob)\n  {\n    Graphics.download_screenshot(blob);\n  }\n\n  updateLabels(frg_w, og_w, mg_w, so_w, sm_w, u_value, total_width, g_o, g_m) {\n    this.application.updateLabels(frg_w, og_w, mg_w, so_w, sm_w, u_value, total_width, g_o, g_m)\n  }\n}\n\nconst Api = new AppApi();\nexport { Api, ResourceBatch };\n","import { BaseApplication } from 'ohzi-core';\nimport { ResourceContainer } from 'ohzi-core';\nimport { ResourceBatch } from 'ohzi-core';\nimport { ViewManager } from 'ohzi-core';\n\nimport InitialView from './views/InitialView';\nimport LoaderView from './views/LoaderView';\n\nexport default class Loader extends BaseApplication\n{\n  constructor(api)\n  {\n    super();\n    this.loader_view = undefined;\n    this.second_step = false;\n\n    this.api = api;\n  }\n\n  load()\n  {\n    let batch = new ResourceBatch();\n\n    batch.load(ResourceContainer);\n\n    this.check_resource_loading(batch, this.on_loader_ready.bind(this), 10);\n  }\n\n  on_enter()\n  {\n    this.loader_view.start();\n  }\n\n  on_loader_ready()\n  {\n    this.second_step = true;\n\n    // let config = ResourceContainer.get_resource('config');\n\n    ViewManager.set_initial_state_data({});\n\n    this.initial_view = new InitialView();\n    this.loader_view = new LoaderView(this.api);\n\n    ViewManager.set_view(this.initial_view.name);\n    ViewManager.go_to_view(this.loader_view.name, false);\n\n    // Start render loop\n    this.api.start();\n\n    let batch = new ResourceBatch();\n\n    batch.add_cubemap('cube', 'textures/cube/', 8000);\n    batch.add_cubemap('cube-blur', 'textures/cube-blur/', 8000);\n    batch.add_texture('noise', 'textures/noise.png', 1000);\n    batch.add_texture('alu-specular', 'textures/alu/specular.jpg', 1000);\n    batch.add_texture('alu-normal', 'textures/alu/normal.jpg', 1000);\n    batch.add_texture('alu-diffuse', 'textures/alu/diffuse.jpg', 1000);\n\n    batch.add_texture('styrofoam-diffuse3', 'textures/styrofoam/diffuse3-2.png', 1000);\n\n    // batch.add_texture('sun', 'textures/sun.png', 1000);\n    batch.add_texture('sun', 'textures/sun-lines.png', 1000);\n    batch.add_texture('blured_circle', 'textures/blured_circle.png', 1000);\n\n    batch.load(ResourceContainer);\n\n    this.check_resource_loading(batch, this.on_assets_ready.bind(this), 10);\n  }\n\n  on_assets_ready()\n  {\n    this.loader_view.on_assets_ready();\n  }\n\n  check_resource_loading(batch, on_resources_loaded, timeout)\n  {\n    // console.log(batch.get_progress(), batch.get_loaded_bytes(), batch.get_total_bytes());\n    if (this.second_step)\n    {\n      this.loader_view.set_progress(batch.get_progress());\n    }\n\n    if (batch.loading_finished)\n    {\n      if (batch.has_errors)\n      {\n        batch.print_errors();\n      }\n      else\n      {\n        on_resources_loaded();\n      }\n    }\n    else\n    {\n      setTimeout(function()\n      {\n        this.check_resource_loading(batch, on_resources_loaded);\n      }.bind(this), timeout);\n    }\n  }\n\n  update()\n  {\n    // SceneController.update();\n  }\n}\n","import { ApplicationView } from 'ohzi-core';\n\nimport { Sections, SectionsURLs } from './Sections';\n\nexport default class InitialView extends ApplicationView\n{\n  constructor()\n  {\n    super({\n      name: Sections.INITIAL,\n      url: SectionsURLs.INITIAL,\n      container: undefined\n    });\n  }\n\n  show()\n  {}\n\n  on_enter()\n  {}\n\n  on_exit()\n  {}\n\n  hide()\n  {}\n\n  update(global_view_data)\n  {\n  }\n}\n","const Sections = {\n  INITIAL: 'initial',\n  LOADER: 'loader',\n  HOME: 'home'\n};\n\nconst SectionsURLs = {\n  INITIAL: '/initial',\n  LOADER: '/loader',\n  HOME: '/'\n};\n\nexport { Sections, SectionsURLs };\n","import { ApplicationView } from 'ohzi-core';\nimport { Graphics } from 'ohzi-core';\nimport { Time } from 'ohzi-core';\nimport { Configuration } from 'ohzi-core';\n\nimport { Sections, SectionsURLs } from './Sections';\n\nimport { Mesh } from 'three';\nimport { OrthographicCamera } from 'three';\nimport { Scene } from 'three';\nimport { Math as TMath } from 'three';\n\nimport FPSCounter from '../components/FPSCounter';\n\nexport default class LoaderView extends ApplicationView\n{\n  constructor(api)\n  {\n    super({\n      name: Sections.LOADER,\n      url: SectionsURLs.LOADER,\n      container: document.querySelector('.loader')\n    });\n\n    this.api = api;\n\n    this.is_assets_ready = false;\n    this.is_api_ready = false;\n\n    this.current_progress = 0;\n    this.target_progress = 0;\n\n    this.compilation_index = 0;\n\n    this.texture_initialized = false;\n    this.ao_initialized = false;\n    this.mesh_compiled = false;\n\n    this.compilation_t = 0;\n    this.performance_t = 0;\n\n    this.objects = [];\n  }\n\n  start()\n  {\n    // SceneController.on_loader_loaded();\n\n    this.progress_bar = document.querySelector('.loader__progress-bar-fill');\n\n    this.set_progress(0);\n  }\n\n  on_enter()\n  {\n    super.on_enter();\n  }\n\n  on_exit()\n  {\n    super.on_exit();\n  }\n\n  set_progress(progress)\n  {\n    // this.target_progress = this.__round(progress / 3, 1);\n    this.target_progress = this.__round(progress, 2);\n  }\n\n  set_api_ready(is_api_ready)\n  {\n    this.is_api_ready = is_api_ready;\n  }\n\n  on_assets_ready()\n  {\n    // Optionally compile objects during loading\n    // this.objects = ?\n\n    this.is_assets_ready = true;\n\n    if (process.env.NODE_ENV === 'development')\n    {\n      this.api.start_main_app();\n    }\n  }\n\n  update_progress()\n  {\n    // this.progress = this.target_progress + this.round((transition_progress / 3) * 2, 2);\n    this.current_progress += (this.target_progress - this.current_progress) * 0.05;\n\n    this.progress_bar.style.transform = `translate3d(${this.current_progress * 100}%,0,0)`;\n  }\n\n  update()\n  {\n    this.update_progress();\n    this.__compile_objects();\n\n    if (this.is_api_ready)\n    {\n      this.api.start_main_app();\n    }\n  }\n\n  update_transition(global_view_data, transition_progress)\n  {\n    // this.set_opacity(global_view_data.loader_opacity);\n\n    this.update_progress();\n    this.__compile_objects();\n    this.__check_performance();\n  }\n\n  __check_performance()\n  {\n    if (this.performance_t > 5 && FPSCounter.avg < 40)\n    {\n      Configuration.dpr -= 0.25;\n      Configuration.dpr = TMath.clamp(Configuration.dpr, 0.75, 10);\n\n      this.performance_t = 0;\n    }\n\n    this.performance_t += Time.delta_time;\n  }\n\n  __compile_objects()\n  {\n    if (this.is_assets_ready)\n    {\n      let scene = new Scene();\n      this.compilation_t += Time.delta_time;\n\n      if (this.compilation_t >= 0 && this.compilation_index < this.objects.length)\n      {\n        scene.add(new Mesh(this.objects[this.compilation_index].geometry, this.objects[this.compilation_index].material));\n        this.compilation_t = 0;\n\n        // 3: Shaders\n        if (!this.mesh_compiled && this.ao_initialized)\n        {\n          Graphics._renderer.compile(scene, new OrthographicCamera(-1000, 1000, 1000, -1000, -1000, 1000));\n          this.mesh_compiled = true;\n        }\n\n        // 2: Ambient Occlusion\n        if (!this.ao_initialized && this.texture_initialized)\n        {\n          // Graphics._renderer.initTexture(this.objects[this.compilation_index].material.aoMap);\n          this.ao_initialized = true;\n        }\n\n        // 1: Emissive map\n        if (!this.texture_initialized)\n        {\n          if (this.objects[this.compilation_index].material.emissiveMap)\n          {\n            Graphics._renderer.initTexture(this.objects[this.compilation_index].material.emissiveMap);\n          }\n          this.texture_initialized = true;\n        }\n\n        scene.remove(this.objects[this.compilation_index]);\n\n        if (this.texture_initialized && this.ao_initialized && this.mesh_compiled)\n        {\n          this.compilation_index++;\n          this.texture_initialized = false;\n          this.ao_initialized = false;\n          this.mesh_compiled = false;\n        }\n      }\n      else\n      {\n        this.set_api_ready(true);\n      }\n    }\n  }\n\n  __round(value, precision)\n  {\n    let multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n  }\n}\n","import { Time } from 'ohzi-core';\n\nclass FPSCounter\n{\n  constructor()\n  {\n    this.last_loop = undefined;\n    this.count = 1;\n    this.total = 1;\n    this.fps = 60;\n\n    this.fps_samples = [60, 60, 60, 60, 60];\n  }\n\n  update()\n  {\n    this.count_fps();\n  }\n\n  count_fps()\n  {\n    this.last_loop = this.last_loop ? this.last_loop : Math.floor(Time.elapsed_time);\n    const current_loop = Math.floor(Time.elapsed_time);\n\n    if (this.last_loop < current_loop)\n    {\n      this.fps = this.count;\n      this.count = 1;\n      this.last_loop = current_loop;\n\n      this.fps_samples.shift();\n      this.fps_samples.push(this.fps);\n    }\n    else\n    {\n      this.count += 1;\n      this.total += 1;\n    }\n  }\n\n  get avg()\n  {\n    let fpss = 0;\n\n    for (let i = 0; i < this.fps_samples.length; i++)\n    {\n      fpss += this.fps_samples[i];\n    }\n\n    return fpss / this.fps_samples.length;\n  }\n}\n\nexport default new FPSCounter();\n","import { BaseApplication } from 'ohzi-core';\nimport { NormalRender } from 'ohzi-core';\nimport { Graphics } from 'ohzi-core';\nimport { ResourceContainer } from 'ohzi-core';\nimport { ViewManager } from 'ohzi-core';\nimport { CameraManager } from 'ohzi-core';\nimport * as Stats from 'stats-js';\n\nimport DatGui from './components/DatGui';\nimport SceneController from './components/SceneController';\nimport HomeView from './views/HomeView';\nimport { SceneManager } from 'ohzi-core';\n\nimport { sRGBEncoding } from 'three';\nimport { Scene } from 'three';\nimport { CubeRefractionMapping } from 'three';\nimport { RepeatWrapping } from 'three';\nimport { PCFSoftShadowMap } from 'three';\nimport { PCFShadowMap } from 'three';\nimport { VSMShadowMap } from 'three';\nimport { MirroredRepeatWrapping } from 'three';\nimport { Color } from 'three';\nimport { ACESFilmicToneMapping } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { Mesh } from 'three';\n\nimport { Sections } from './views/Sections';\n\n//\nimport Structure from './components/Structure';\nimport Sun from './components/Sun';\nimport Sky from './components/Sky';\n\nexport default class MainApplication extends BaseApplication\n{\n  init()\n  {\n    this.scene_controller = SceneController;\n    this.normal_render_mode = new NormalRender();\n\n    this.scene_controller.init();\n\n    Graphics.set_state(this.normal_render_mode);\n    Graphics._renderer.outputEncoding = sRGBEncoding;\n\n    Graphics._renderer.toneMapping = ACESFilmicToneMapping;\n    Graphics._renderer.shadowMap.type = VSMShadowMap;\n    //Graphics._renderer.shadowMap.type = PCFSoftShadowMap;\n\n    Graphics._renderer.shadowMap.enabled = true;\n\n    Graphics._renderer.setClearColor(undefined, 0);\n    Graphics._renderer.autoClear = false;\n    DatGui.init();\n\n    this.stats = new Stats();\n    this.stats.showPanel( 0 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n    //Graphics._renderer.domElement.appendChild( this.stats.dom );\n    document.body.appendChild( this.stats.dom );\n  }\n\n  on_enter()\n  {\n    ResourceContainer.get_resource(\"cube\").mapping = CubeRefractionMapping;\n    ResourceContainer.get_resource(\"cube\").encoding = sRGBEncoding;\n\n    ResourceContainer.get_resource(\"cube-blur\").mapping = CubeRefractionMapping;\n    ResourceContainer.get_resource(\"cube-blur\").encoding = sRGBEncoding;\n\n    ResourceContainer.get_resource(\"alu-diffuse\").repeat.set(6, 0.5);\n    ResourceContainer.get_resource(\"alu-diffuse\").wrapT = RepeatWrapping;\n    ResourceContainer.get_resource(\"alu-diffuse\").wrapS = RepeatWrapping;\n    ResourceContainer.get_resource(\"alu-diffuse\").encoding = sRGBEncoding;\n\n    ResourceContainer.get_resource(\"noise\").wrapT = MirroredRepeatWrapping;\n    ResourceContainer.get_resource(\"noise\").wrapS = MirroredRepeatWrapping;\n\n    ResourceContainer.get_resource(\"alu-normal\").repeat.set(6, 0.5);\n    ResourceContainer.get_resource(\"alu-normal\").wrapT = RepeatWrapping;\n    ResourceContainer.get_resource(\"alu-normal\").wrapS = RepeatWrapping;\n\n    ResourceContainer.get_resource(\"alu-specular\").repeat.set(6, 0.5);\n    ResourceContainer.get_resource(\"alu-specular\").wrapT = RepeatWrapping;\n    ResourceContainer.get_resource(\"alu-specular\").wrapS = RepeatWrapping;\n\n    ResourceContainer.get_resource(\"styrofoam-diffuse3\").wrapS = MirroredRepeatWrapping;\n    ResourceContainer.get_resource(\"styrofoam-diffuse3\").wrapS = MirroredRepeatWrapping;\n    ResourceContainer.get_resource(\"styrofoam-diffuse3\").encoding = sRGBEncoding;\n\n    ResourceContainer.get_resource(\"sun\").encoding = sRGBEncoding;\n\n    SceneManager.backScene = new Scene();\n    SceneManager.frontScene = new Scene();\n    //SceneManager.backScene.background = ResourceContainer.get_resource(\"cube-blur\");\n\n    this.sun = new Sun();\n    this.sun.position.set( 1.0, 0.0, 1.5);\n    SceneManager.current.add(this.sun);\n\n    this.sky = new Sky();\n    this.sky.scale.setScalar( 100 );\n    SceneManager.current.add( this.sky );\n\n    this.structure = new Structure();\n    this.structure.set({thickness: 10, layers:[\"10:0\"]},{thickness:0, layers:[\"0:0\"]},{thickness:0, layers:[\"0:0\"]},{thickness:0},{thickness:0});\n\n    let floor_geometry = new PlaneGeometry( 1000, 1000 );\n    floor_geometry.rotateX(Math.PI * -0.5);\n\n    let floor_shadow_glass_material = new ShadowMaterial( { opacity: 0.025, dithering: true } );\n    let floor_shadow_spacer_material = new ShadowMaterial( { opacity: 0.2, dithering: true } );\n    \n    let floor_shadow_glass = new Mesh(floor_geometry, floor_shadow_glass_material);\n    let floor_spacer_glass = new Mesh(floor_geometry, floor_shadow_spacer_material);\n    \n    floor_shadow_glass.receiveShadow = true;\n    floor_spacer_glass.receiveShadow = true;\n    floor_shadow_glass.position.y = -0.0125;\n    floor_spacer_glass.position.y = -0.0125;\n\n    SceneManager.frontScene.add(floor_spacer_glass);\n    SceneManager.current.add(floor_shadow_glass);\n\n    SceneManager.frontScene.add(this.structure);\n\n\n    this.config = ResourceContainer.get_resource('config');\n\n    this.sections = Sections;\n\n    this.home_view = new HomeView();\n    this.home_view.start();\n\n    this.scene_controller.start();\n\n    DatGui.start();\n\n    this.go_to(Sections.INITIAL);\n     document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n    }, false);\n\n  }\n\n  go_to(section)\n  {\n    ViewManager.go_to_view(section, false);\n  }\n\n  update()\n  {\n\n    this.stats.begin();\n\n    this.scene_controller.update();\n    this.structure.update();\n\n    this.stats.end();\n    this.sky.update();\n  }\n\n  updateLabels(frg_w, og_w, mg_w, so_w, sm_w, u_value, total_width, g_o, g_m) {\n    if(!this.structure) {\n      console.warn(\"there are better fixes than this\");\n      return;\n    }\n    this.structure.set(frg_w, mg_w, og_w, sm_w, so_w)\n\n  }\n\n  on_post_render() {\n    Graphics.render(SceneManager.frontScene, CameraManager.current);\n  }\n\n  on_post_start()\n  {\n  }\n}\n","import * as dat from 'dat.gui';\n\nclass DatGUI\n{\n  constructor()\n  {\n    this.dat_gui = undefined;\n\n    this.settings = {\n      scale: 0.8,\n      refractionIndex : 1.00125,\n      dispersion : 0.005,\n      opacity : 0.06,\n      roughness : 0.98,\n      fesnel : 0.08,\n      color : 0xe0e0e0,\n      floor_shadow_opacity : 0.04,\n      refractionRatio: 0.98,\n      roughness : 0.0,\n      metalness : 1.0,\n      reflectivity : 0.95,\n      clearcoat :1.0,\n      clearcoatRoughness : 0.4,\n      turbidity: 0.5,\n      rayleigh: 0.26,\n      mieCoefficient: 0.002,\n      mieDirectionalG: 0.72,\n      elevation: 80,\n      azimuth: 8.4,\n      exposure: 1.0,\n    };\n\n\n\n \n  }\n\n  init()\n  {\n    document.addEventListener('keydown', event =>\n    {\n      if (event.shiftKey && event.key === 'K')\n      {\n        document.querySelector('.dg.ac').classList.toggle('hidden');\n      }\n    });\n  }\n\n  start()\n  {\n    this.dat_gui = new dat.GUI();\n    this.dat_gui.close();\n    document.querySelector('.dg.ac').style['z-index'] = 999;\n    document.querySelector('.dg.ac').classList.add('hidden');\n\n    this.dat_gui.add(this.settings, 'scale', 0.1, 2);\n    this.dat_gui.add(this.settings, 'refractionIndex').min(-1).max(2).step(0.0025);\n    this.dat_gui.add(this.settings, 'dispersion').min(-1).max(2).step(0.0025);\n    this.dat_gui.add(this.settings, 'roughness').min(0.3).max(1).step(0.0025);\n    this.dat_gui.add(this.settings, 'opacity').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'fesnel').min(0).max(0.5).step(0.01);\n    this.dat_gui.add(this.settings, 'floor_shadow_opacity').min(0).max(1).step(0.01);\n    this.dat_gui.addColor(this.settings, 'color');\n\n    this.dat_gui.add(this.settings, 'refractionRatio').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'roughness').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'metalness').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'reflectivity').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'clearcoat').min(0).max(1).step(0.01);\n    this.dat_gui.add(this.settings, 'clearcoatRoughness').min(0).max(1).step(0.01);\n\n    this.dat_gui.add( this.settings, 'turbidity', 0.0, 20.0, 0.1 );\n    this.dat_gui.add( this.settings, 'rayleigh', 0.0, 4, 0.001 );\n    this.dat_gui.add( this.settings, 'mieCoefficient', 0.0, 0.1, 0.001 );\n    this.dat_gui.add( this.settings, 'mieDirectionalG', 0.0, 1, 0.001 );\n    this.dat_gui.add( this.settings, 'elevation', 0, 90, 0.1 );\n    this.dat_gui.add( this.settings, 'azimuth', - 180, 180, 0.1 );\n    this.dat_gui.add( this.settings, 'exposure', 0, 2, 0.05 );\n\n    this.dat_gui.width = 400;\n  }\n}\n\nexport default new DatGUI();\n","import { PerspectiveCamera } from 'ohzi-core';\nimport { CameraManager } from 'ohzi-core';\nimport { Grid } from 'ohzi-core';\nimport { Debug } from 'ohzi-core';\nimport { SceneManager } from 'ohzi-core';\nimport { Screen } from 'ohzi-core';\nimport { Graphics } from 'ohzi-core';\n\nimport { Color } from 'three';\nimport { Fog } from 'three';\nimport { AmbientLight } from 'three';\nimport { DirectionalLight } from 'three';\nimport { SpotLight } from 'three';\nimport { SpotLightHelper } from 'three';\nimport { CameraHelper } from 'three';\nimport { Object3D } from 'three';\n\nimport CameraController from '../camera_controller/CameraController';\nimport CameraSimpleState from '../camera_controller/states/CameraSimpleState';\n\nclass SceneController\n{\n  init()\n  {\n    this.camera_controller = new CameraController();\n  }\n\n  start()\n  {\n    this.__init_camera();\n    this.__init_camera_controller();\n\n    this.add_lights();\n\n    // Debug.draw_sphere();\n    // Debug.draw_axis();\n    //SceneManager.current.add(new Grid());\n\n    SceneManager.current.fog = new Fog( 0x050505, 50, 100 );\n\n    // Here we add all objects into the scene\n    // this.alley = new Alley();\n    // SceneManager.current.add(this.alley);\n\n    // Compile shaders on the first frame\n    Graphics.update();\n\n    // After the object is rendered, we hide it\n    // this.alley.hide();\n  }\n\n  add_lights()\n  {\n    let light = new AmbientLight('#FFFFFF', 0.2);\n    SceneManager.current.add(light);\n\n    // let directional_light = new DirectionalLight('#FFFFFF', 1);\n    // directional_light.position.set(0, 10, 20);\n    // SceneManager.current.add(directional_light);\n\n    const spotLight = new SpotLight( 0xffffff, 0.5 );\n    spotLight.position.set( 1, 5, 3 );\n    spotLight.angle = Math.PI / 8;\n    spotLight.penumbra = 0.8;\n    spotLight.decay = 2;\n    spotLight.distance = 10;\n    spotLight.target.position.x = -15;\n    spotLight.target.updateMatrix = true;\n\n    const targetObject = new Object3D();\n    targetObject.position.x = 1;\n    SceneManager.current.add(targetObject);\n    spotLight.target = targetObject;\n\n    spotLight.castShadow = true;\n    spotLight.shadow.mapSize.width = 1024 * 2;\n    spotLight.shadow.mapSize.height = 1024 * 2;\n    spotLight.shadow.camera.near = 3.7;\n    spotLight.shadow.camera.far = 5.9;\n    spotLight.shadow.focus = 1.0;\n    spotLight.shadow.bias =  -0.002;\n    spotLight.shadow.radius = 20;\n\n    SceneManager.current.add(spotLight);\n    let shadowClone = spotLight.clone();\n    shadowClone.shadow.mapSize.width = 1024 * 2;\n    shadowClone.shadow.mapSize.height = 1024 * 2;\n    shadowClone.shadow.camera.near = 3.7;\n    shadowClone.shadow.camera.far = 5.9;\n    shadowClone.shadow.focus = 1.0;\n    shadowClone.shadow.bias = - 0.002;\n    shadowClone.shadow.radius = 20;   \n     \n    SceneManager.frontScene.add(shadowClone);\n\n    const targetObjectShadow = new Object3D();\n    targetObjectShadow.position.x = 1;\n    SceneManager.frontScene.add(targetObjectShadow);\n    shadowClone.target = targetObjectShadow;\n\n    const spotLight2 = new DirectionalLight( 0xffffff, 0.2 );\n    spotLight2.position.set( 4, 6, 8 );\n\n    SceneManager.current.add(spotLight);\n\n    //const shadowCameraHelper = new CameraHelper( spotLight.shadow.camera );\n    //SceneManager.current.add( shadowCameraHelper );\n\n  }\n\n  update()\n  {\n    this.camera_controller.update();\n    // this.alley.update();\n  }\n\n  __init_camera()\n  {\n    let camera = new PerspectiveCamera(60, Screen.aspect_ratio, 0.1, 200);\n    camera.updateProjectionMatrix();\n    camera.position.z = 10;\n\n    camera.clear_color.copy(new Color('#181818'));\n    camera.clear_alpha = 1;\n    camera.fov = 30\n    CameraManager.current = camera;\n  }\n\n  __init_camera_controller()\n  {\n    this.camera_controller.set_camera(CameraManager.current);\n    // this.camera_controller.set_idle();\n    //this.camera_controller.set_standard_mode();\n    this.camera_controller.set_state(new CameraSimpleState());\n\n    this.camera_controller.min_zoom = 1;\n    this.camera_controller.max_zoom = 40;\n    this.camera_controller.reference_zoom = 7;\n    this.camera_controller.reference_position.set(1, 1, 0);\n    this.camera_controller.set_rotation(13, 65);\n  }\n}\n\nexport default new SceneController();\n","import CameraViewState from './states/CameraViewState';\nimport ImmediateMode from './movement_mode/ImmediateMode';\n\nimport { Screen } from 'ohzi-core';\nimport { Debug } from 'ohzi-core';\nimport { MathUtilities } from 'ohzi-core';\nimport { SceneManager } from 'ohzi-core';\nimport { PerspectiveFrustumPointFitter } from 'ohzi-core';\nimport { OrthographicFrustumPointFitter } from 'ohzi-core';\n\nimport { Vector3 } from 'three';\nimport { Quaternion } from 'three';\nimport { PlaneHelper } from 'three';\nimport { Plane } from 'three';\nimport { Sphere } from 'three';\nimport { Box3 } from 'three';\nimport { Ray } from 'three';\nimport { Math as TMath } from 'three';\n\nimport CameraStandardState from './states/CameraStandardState';\n\nexport default class CameraController\n{\n  constructor()\n  {\n    this.camera = undefined;\n    this.camera_initial_rot = undefined;\n    this.camera_initial_pos = undefined;\n    this.current_state = new CameraViewState();\n\n    this.current_mode = new ImmediateMode();\n\n    this.point_of_interest = new Vector3();\n    this.normalized_zoom = 0;\n\n    this.vector_up_axis   = new Vector3(0, 1, 0);\n    this.vector_right_axis = new Vector3(1, 0, 0);\n    this.vector_forward_axis = new Vector3(0, 0, 1);\n    this.tmp_forward = this.vector_forward_axis.clone();\n    this.tmp_right = this.vector_right_axis.clone();\n\n    this.tmp_dir = new Vector3();\n\n    this.zoom = 10;\n    this.reference_zoom = 10;\n    this.orientation = 27; // degrees\n    this.tilt = 70;\n\n    this.reference_rotation = new Quaternion();\n    this.reference_position = new Vector3();\n    this.__last_reference_position = new Vector3();\n\n    this.tmp_size = new Vector3();\n    this.tmp_quat = new Quaternion();\n\n    this.min_zoom = 1;\n    this.max_zoom = 400;\n\n    this.current_tilt = 0;\n    this.current_orientation = 0;\n\n    this.input_enabled = true;\n    // this.debug_box = Debug.draw_cube(undefined,15);\n    // this.debug_zoom_box = Debug.draw_sphere(undefined,15, 0x00ff00);\n\n    this.projected_points = [];\n    for (let i = 0; i < 30; i++)\n    {\n      this.projected_points.push(Debug.draw_sphere(undefined, 0.5, 0x00ff00));\n    }\n    this.hide_projected_points();\n    this.projection_plane_helper = new PlaneHelper(new Plane(), 1, 0xff00);\n    this.projection_plane_helper.visible = false;\n    SceneManager.current.add(this.projection_plane_helper);\n\n    this.projection_sphere_helper = Debug.draw_sphere_helper(new Sphere(), 0xff0000);\n    this.projection_sphere_helper.material.transparent = true;\n    this.projection_sphere_helper.material.opacity = 0.3;\n    this.projection_sphere_helper.visible = false;\n  }\n\n  set_camera(camera)\n  {\n    this.camera = camera;\n    this.camera_initial_rot = camera.quaternion.clone();\n    this.camera_initial_pos = camera.position.clone();\n  }\n\n  set_state(state)\n  {\n    // console.log(\"camera controller state switch to: \" + state.constructor.name);\n    this.current_state.on_exit(this);\n    this.current_state = state;\n    this.current_state.on_enter(this);\n  }\n\n  set_mode(mode)\n  {\n    // console.log(\"camera controller mode switch to: \" + mode.constructor.name);\n\n    this.current_mode.on_exit(this);\n    this.current_mode = mode;\n    this.current_mode.on_enter(this);\n  }\n\n  set_normalized_zoom(zoom)\n  {\n    this.normalized_zoom = TMath.clamp(zoom, 0, 1);\n    // EventManager.fire_zoom_changed(this.normalized_zoom);\n  }\n\n  update_normalized_zoom(min_zoom, max_zoom)\n  {\n    let zoom = this.camera.position.distanceTo(this.reference_position);\n    this.normalized_zoom = MathUtilities.linear_map(zoom, min_zoom, max_zoom, 1, 0);\n    this.normalized_zoom = TMath.clamp(this.normalized_zoom, 0, 1);\n\n    // EventManager.fire_zoom_changed(this.normalized_zoom);\n  }\n\n  update()\n  {\n    if (this.debug_box)\n    {\n      this.debug_box.position.copy(this.reference_position);\n    }\n\n    // this.debug_zoom_box.position.copy(this.reference_position)\n    // this.debug_zoom_box.position.add(new Vector3(0,0,1).applyQuaternion(this.camera.quaternion).multiplyScalar(this.reference_zoom));\n\n    this.current_state.update(this);\n    this.current_mode.update(this);\n    this.update_normalized_zoom(this.min_zoom, this.max_zoom);\n  }\n\n  set_idle()\n  {\n    this.set_state(new CameraViewState());\n  }\n\n  camera_is_zoomed_out()\n  {\n    return this.normalized_zoom < 0.2;\n  }\n\n  set_standard_mode()\n  {\n    this.set_state(new CameraStandardState());\n  }\n\n  set_rotation(tilt, orientation)\n  {\n    this.old_orientation = this.current_orientation;\n\n    this.current_tilt = tilt || this.current_tilt;\n    this.current_orientation = orientation || this.current_orientation;\n    this.reference_rotation.copy(this.build_rotation(this.current_tilt, this.current_orientation));\n  }\n\n  set_tilt(tilt)\n  {\n    let new_tilt = new Quaternion().setFromAxisAngle(this.vector_right_axis, (-tilt / 360) * Math.PI * 2);\n    let old_tilt = new Quaternion().setFromAxisAngle(this.vector_right_axis, (-this.current_tilt / 360) * Math.PI * 2);\n    old_tilt.conjugate();\n\n    this.reference_rotation.multiply(old_tilt).multiply(new_tilt);\n    this.current_tilt = tilt;\n  }\n\n  set_rotation_delta(delta_x, delta_y)\n  {\n    this.current_orientation = (this.current_orientation + delta_x) % 360;\n    this.current_tilt += delta_y;\n\n    this.set_rotation(this.current_tilt, this.current_orientation);\n  }\n\n  lerp_rotation(from_tilt, to_tilt, from_orientation, to_orientation, t)\n  {\n    let raw_orientation = TMath.lerp(from_orientation, to_orientation, t);\n    if (Math.abs(to_orientation - from_orientation) > 180)\n    {\n      if (from_orientation > 180)\n      {\n        from_orientation = (from_orientation % 360) - 360;\n      }\n      if (to_orientation > 180)\n      {\n        to_orientation = (to_orientation % 360) - 360;\n      }\n    }\n\n    this.set_rotation(TMath.lerp(from_tilt, to_tilt, t), TMath.lerp(from_orientation, to_orientation, t));\n\n    this.current_orientation = raw_orientation;\n  }\n\n  build_rotation(tilt, orientation)\n  {\n    let new_orientation = new Quaternion().setFromAxisAngle(this.vector_up_axis, (orientation / 360) * Math.PI * 2);\n    let new_tilt = new Quaternion().setFromAxisAngle(this.vector_right_axis, (-tilt / 360) * Math.PI * 2);\n\n    return new_orientation.multiply(new_tilt);\n  }\n\n  translate_forward(amount)\n  {\n    this.tmp_forward.copy(this.vector_forward_axis);\n    this.tmp_forward.applyQuaternion(this.camera.quaternion);\n    this.tmp_forward.y = 0;\n    this.tmp_forward.normalize();\n    this.reference_position.add(this.tmp_forward.multiplyScalar(amount));\n  }\n\n  translate_right(amount)\n  {\n    this.tmp_right.copy(this.vector_right_axis);\n    this.tmp_right.applyQuaternion(this.camera.quaternion);\n    this.reference_position.add(this.tmp_right.multiplyScalar(amount));\n  }\n\n  focus_on_bounding_box(bb, scale = 1)\n  {\n    if (this.camera.isOrthographicCamera)\n    {\n      bb.getSize(this.tmp_size);\n\n      let obj_x = this.tmp_size.x;\n      let obj_y = this.tmp_size.y;\n      let object_aspect = obj_x / obj_y;\n      if (Screen.aspect_ratio / object_aspect > 1)\n      {\n        this.camera.zoom = Screen.height / obj_y;\n      }\n      else\n      {\n        this.camera.zoom = Screen.width / obj_x;\n      }\n\n      bb.getCenter(this.reference_position);\n    }\n    else\n    {\n      let dir = new Vector3();\n      dir.copy(bb.max).sub(bb.min);\n\n      let p1 = bb.min.clone();\n\n      let p2 = p1.clone().add(new Vector3(dir.x, 0, 0));\n      let p3 = p1.clone().add(new Vector3(0, dir.y, 0));\n      let p4 = p1.clone().add(new Vector3(0, 0, dir.z));\n\n      let p5 = p1.clone().add(new Vector3(dir.x, 0, dir.z));\n      let p6 = p1.clone().add(new Vector3(0, dir.y, dir.z));\n      let p7 = bb.max.clone();\n      let p8 = p1.clone().add(new Vector3(dir.x, dir.y, 0));\n\n      this.focus_camera_on_points([p1, p2, p3, p4, p5, p6, p7, p8], scale);\n    }\n  }\n\n  get_zoom_to_focus_on_bounding_box(bb, tilt, orientation)\n  {\n    if (tilt !== undefined && orientation !== undefined)\n    {\n      this.tmp_quat.copy(this.reference_rotation); // backup quaternion\n      this.reference_rotation.copy(this.build_rotation(tilt, orientation));\n    }\n    let original_zoom = this.reference_zoom;\n    let original_pos = new Vector3().copy(this.reference_position);\n    this.focus_camera_on_bounding_box(bb);\n    let target_zoom = this.reference_zoom;\n    this.reference_position.copy(original_pos);\n    this.reference_zoom = original_zoom;\n\n    if (tilt !== undefined && orientation !== undefined)\n    {\n      this.reference_rotation.copy(this.tmp_quat);\n    }\n\n    return target_zoom;\n  }\n\n  get_zoom_to_focus_on_points(points, scale)\n  {\n    let old_zoom = this.reference_zoom;\n    let old_pos = new Vector3().copy(this.reference_position);\n    this.focus_camera_on_points(points, scale);\n    let new_zoom = this.reference_zoom;\n    this.reference_zoom = old_zoom;\n    this.reference_position.copy(old_pos);\n    return new_zoom;\n  }\n\n  get_target_pos_to_focus_on_points(points, scale)\n  {\n    let old_zoom = this.reference_zoom;\n    let old_pos = new Vector3().copy(this.reference_position);\n    this.focus_camera_on_points(points, scale);\n    let new_pos = this.reference_zoom.clone();\n    this.reference_zoom = old_zoom;\n    this.reference_position.copy(old_pos);\n    return new_pos;\n  }\n\n  focus_camera_on_sphere(sphere, debug)\n  {\n    this.reference_zoom = this.get_zoom_to_sphere(sphere, debug);\n    this.reference_position.copy(sphere.center);\n  }\n\n  get_zoom_to_sphere(sphere, debug)\n  {\n    let v_fov = (this.camera.fov / 2) * Math.PI / 180;\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * this.camera.aspect)) / 2;\n\n    // if(debug )\n    // {\n    //   Debug.draw_math_sphere(sphere);\n    // }\n    // this.camera.zoom = 1/((sphere.radius*2) /(ViewApi.map.camera_controller.camera.top*2));\n    // this.camera.updateProjectionMatrix();\n\n    let distV = sphere.radius / Math.tan(v_fov);\n    let distH = sphere.radius / Math.tan(h_fov);\n    return Math.max(Math.abs(distH), Math.abs(distV));\n  }\n\n  hide_projected_points()\n  {\n    for (let i = 0; i < this.projected_points.length; i++)\n    {\n      this.projected_points[i].visible = false;\n    }\n  }\n\n  show_projected_points(points)\n  {\n    this.hide_projected_points();\n    for (let i = 0; i < points.length; i++)\n    {\n      this.projected_points[i].visible = true;\n      this.projected_points[i].position.copy(points[i]);\n    }\n  }\n\n  show_plane_projection(plane, size = 1)\n  {\n    this.projection_plane_helper.plane = plane;\n    this.projection_plane_helper.size = size;\n    this.projection_plane_helper.updateMatrixWorld();\n    this.projection_plane_helper.visible = true;\n  }\n\n  show_sphere_projection(sphere)\n  {\n    this.projection_sphere_helper.scale.set(sphere.radius, sphere.radius, sphere.radius);\n    this.projection_sphere_helper.position.copy(sphere.center);\n    this.projection_sphere_helper.visible = true;\n  }\n\n  focus_camera_on_points(points, zoom_scale = 1)\n  {\n    if (this.camera.isPerspectiveCamera)\n    {\n      let camera_forward_dir = new Vector3(0, 0, -1).applyQuaternion(this.reference_rotation);\n      let camera_backward_dir = camera_forward_dir.clone().multiplyScalar(-1);\n\n      let fitter = new PerspectiveFrustumPointFitter();\n\n      let aspect_ratio = Screen.aspect_ratio;\n\n      let camera_pos = fitter.fit_points(points, this.reference_rotation, this.camera.fov * zoom_scale, aspect_ratio);\n      let box = new Box3().setFromPoints(points);\n      let center = new Vector3();\n      box.getCenter(center);\n\n      let reference_position_plane = new Plane().setFromNormalAndCoplanarPoint(camera_backward_dir, center);\n\n      let camera_ray = new Ray(camera_pos, camera_forward_dir);\n\n      let reference_position = new Vector3();\n      camera_ray.intersectPlane(reference_position_plane, reference_position);\n\n      let zoom = camera_pos.distanceTo(reference_position);\n\n      this.reference_zoom = zoom;\n      this.reference_position.copy(reference_position);\n    }\n    else\n    {\n      let fitter = new OrthographicFrustumPointFitter();\n      let result = fitter.fit_points(points, this.reference_rotation, this.camera.fov * zoom_scale, Screen.aspect_ratio);\n\n      this.reference_position.copy(result.center);\n      this.reference_zoom = result.distance_to_center;\n    }\n  }\n\n  get_current_tilt()\n  {\n    return this.current_tilt;\n  }\n\n  get_current_orientation()\n  {\n    return this.current_orientation;\n  }\n\n  __get_zoom_to_show_rect(width, height, scale = 1)\n  {\n    // let v_fov = (this.camera.fov/2) * Math.PI/180;\n    let v_fov = TMath.degToRad(this.camera.fov / 2);\n    let h_fov = (2 * Math.atan(Math.tan(v_fov) * this.camera.aspect)) / 2;\n\n    let distV = height / Math.tan(v_fov * scale);\n    let distH = width / Math.tan(h_fov * scale);\n    return Math.max(Math.abs(distH), Math.abs(distV));\n  }\n}\n","export default class CameraViewState\n{\n  constructor()\n  {\n\n  }\n\n  on_enter(camera_controller)\n  {\n\n  }\n\n  on_exit(camera_controller)\n  {\n\n  }\n\n  update(TIME, camera_controller)\n  {\n\n  }\n}\n","\nimport CameraMovementMode from './CameraMovementMode';\n\nimport { Vector2 } from 'three';\nimport { Vector3 } from 'three';\nimport { Quaternion } from 'three';\nimport { Math as TMath } from 'three';\n\nexport default class ImmediateMode extends CameraMovementMode\n{\n  constructor()\n  {\n    super();\n    this.rotation_speed = new Vector2();\n\n    this.vector_forward_axis = new Vector3(0, 0, -1);\n    this.tmp_forward = new Vector3();\n\n    this.tmp_quat = new Quaternion();\n    this.tmp_camera_target_pos = new Vector3();\n  }\n\n  on_enter(camera_controller)\n  {\n    camera_controller.reference_rotation.copy(camera_controller.camera.quaternion);\n  }\n\n  update(camera_controller)\n  {\n    camera_controller.camera.quaternion.copy(camera_controller.reference_rotation);\n\n    this.tmp_forward.copy(this.vector_forward_axis);\n    let dir = this.tmp_forward.applyQuaternion(camera_controller.camera.quaternion);\n\n    camera_controller.reference_zoom = TMath.clamp(camera_controller.reference_zoom,\n      camera_controller.min_zoom, camera_controller.max_zoom);\n\n    camera_controller.camera.position.copy(camera_controller.reference_position).sub(dir.multiplyScalar(camera_controller.reference_zoom));\n\n    camera_controller.__last_reference_position.copy(camera_controller.reference_position);\n  }\n\n  get_target_camera_pos(camera_controller)\n  {\n    this.tmp_quat.copy(camera_controller.reference_rotation);\n    this.tmp_forward.copy(this.vector_forward_axis);\n\n    let dir = this.tmp_forward.applyQuaternion(this.tmp_quat);\n\n    let zoom = TMath.clamp(camera_controller.reference_zoom,\n      camera_controller.min_zoom, camera_controller.max_zoom);\n\n    this.tmp_camera_target_pos.copy(camera_controller.reference_position).sub(dir.multiplyScalar(zoom));\n    return this.tmp_camera_target_pos;\n  }\n}\n","export default class CameraMovementMode\n{\n  constructor()\n  {\n\n  }\n\n  on_enter(camera_controller)\n  {\n\n  }\n\n  on_exit(camera_controller)\n  {\n\n  }\n\n  update(TIME, camera_controller)\n  {\n\n  }\n}\n","import CameraViewState from './CameraViewState';\n\nimport { Input }  from 'ohzi-core';\n\nimport { Vector2 } from 'three';\nimport { Vector3 } from 'three';\nimport { Ray, Math as TMath } from 'three';\n\nexport default class CameraStandardState extends CameraViewState\n{\n  constructor()\n  {\n    super();\n    this.pan_speed = new Vector2();\n\n    this.zoom_speed = 0;\n    this.zoom_t = 0;\n\n    this.tilt_degrees = 70;\n    this.tilt_speed = 0;\n\n    this.vector_down_axis = new Vector3(0, -1, 0);\n    this.vector_up_axis   = new Vector3(0, 1, 0);\n    this.vector_back_axis = new Vector3(0, 0, -1);\n    this.vector_left_axis = new Vector3(-1, 0, 0);\n\n    this.tmp_dir = new Vector3();\n    this.tmp_ray = new Ray();\n\n    this.tmp_intersection = new Vector3();\n    this.tmp_mouse_dir = new Vector2();\n\n    this.last_NDC = new Vector2();\n\n    this.rotation_velocity = new Vector2();\n    this.zoom_velocity = 0;\n\n\n    this.forward_dir = 0;\n    this.right_dir = 0;\n\n    window.addEventListener('keydown', this.on_key_down.bind(this), false);\n    window.addEventListener('keyup', this.on_key_up.bind(this), false);\n  }\n\n  on_enter(camera_controller)\n  {\n    this.t_damping = 0;\n  }\n\n  on_exit(camera_controller)\n  {\n  }\non_key_down(event)\n  {\n    switch (event.key)\n    {\n    case 'w':\n      this.forward_dir = -0.3;\n      break;\n    case 's':\n      this.forward_dir = 0.3;\n      break;\n    case 'a':\n      this.right_dir = -0.3;\n      break;\n    case 'd':\n      this.right_dir = 0.3;\n      break;\n    case 'Shift':\n      this.shift_key = true;\n      break;\n    default:\n      break;\n    }\n  }\n\n  on_key_up(event)\n  {\n    switch (event.key)\n    {\n    case 'w':\n      this.forward_dir = 0;\n      break;\n    case 's':\n      this.forward_dir = 0;\n      break;\n    case 'a':\n      this.right_dir = 0;\n      break;\n    case 'd':\n      this.right_dir = 0;\n      break;\n    case 'Shift':\n      this.shift_key = false;\n      break;\n    default:\n      break;\n    }\n  }\n\n  update(camera_controller)\n  {\n    if (!camera_controller.input_enabled)\n    {\n      return;\n    }\n\n    // camera_controller.reference_zoom += Input.scroll_delta * 0.5;\n\n    camera_controller.camera.fov += Input.scroll_delta * 2;\n    camera_controller.camera.fov = TMath.clamp(camera_controller.camera.fov, 3, 80);\n\n    if (Input.left_mouse_button_pressed)\n    {\n      this.last_NDC.copy(Input.NDC);\n    }\n\n    if (Input.left_mouse_button_down && Input.pointer_count === 1)\n    {\n      this.rotation_velocity.add(new Vector2(Input.NDC_delta.x * -16, Input.NDC_delta.y * -4));\n    }\n\n    camera_controller.set_rotation_delta(this.rotation_velocity.x, this.rotation_velocity.y);\n\n    this.rotation_velocity.multiplyScalar(0.9);\n\n    this.last_NDC.copy(Input.NDC);\n    \n    camera_controller.translate_forward(this.forward_dir);\n    camera_controller.translate_right(this.right_dir);\n\n  }\n}\n","import CameraViewState from './CameraViewState';\n\nimport { Input }  from 'ohzi-core';\nimport { CameraUtilities }  from 'ohzi-core';\n\nimport { Vector2 } from 'three';\nimport { Vector3 } from 'three';\nimport { Ray, Math as TMath } from 'three';\nimport { Raycaster } from 'three';\nimport SceneController from '../../components/SceneController';\n\nexport default class CameraSimpleState extends CameraViewState\n{\n  constructor()\n  {\n    super();\n    this.pan_speed = new Vector2();\n\n    this.zoom_speed = 0;\n    this.zoom_t = 0;\n\n    this.tilt_degrees = 70;\n    this.tilt_speed = 0;\n\n    this.vector_down_axis = new Vector3(0, -1, 0);\n    this.vector_up_axis   = new Vector3(0, 1, 0);\n    this.vector_back_axis = new Vector3(0, 0, -1);\n    this.vector_left_axis = new Vector3(-1, 0, 0);\n\n    this.tmp_dir = new Vector3();\n    this.tmp_ray = new Ray();\n\n    this.tmp_intersection = new Vector3();\n    this.tmp_mouse_dir = new Vector2();\n\n    this.last_NDC = new Vector2();\n    this.last_point = new Vector2();\n\n    this.rotation_velocity = new Vector2();\n    this.zoom_velocity = 0;\n\n\n    this.forward_dir = 0;\n    this.right_dir = 0;\n  }\n\n  on_enter(camera_controller)\n  {\n    this.t_damping = 0;\n  }\n\n  on_exit(camera_controller)\n  {\n  }\n\n  update(camera_controller)\n  {\n    camera_controller.reference_zoom -= Input.scroll_delta;\n\n\n    if (Input.left_mouse_button_pressed)\n    {\n      this.last_NDC.copy(Input.NDC);\n    }\n    if (Input.right_mouse_button_pressed)\n    {\n      this.last_point.copy(Input.NDC);\n    }\n\n    if (Input.left_mouse_button_down && Input.pointer_count === 1)\n    {\n      this.rotation_velocity.add(new Vector2(Input.NDC_delta.x * -16, Input.NDC_delta.y * -4));\n    }\n\n    if (Input.right_mouse_button_down)\n    {\n      let prev_point    = CameraUtilities.get_plane_intersection(camera_controller.reference_position, undefined, this.last_point).clone();\n      let current_point = CameraUtilities.get_plane_intersection(camera_controller.reference_position, undefined, Input.NDC).clone();\n      current_point.sub(prev_point);\n\n      camera_controller.reference_position.x -= current_point.x;\n      camera_controller.reference_position.y -= current_point.y;\n      camera_controller.reference_position.z -= current_point.z;\n      this.last_point.copy(Input.NDC);\n      \n    }\n\n    camera_controller.set_rotation_delta(this.rotation_velocity.x, this.rotation_velocity.y);\n\n    this.rotation_velocity.multiplyScalar(0.9);\n\n    this.last_NDC.copy(Input.NDC);\n  }\n\n}\n","import { ApplicationView } from 'ohzi-core';\n\nimport { Sections, SectionsURLs } from './Sections';\n\nexport default class HomeView extends ApplicationView\n{\n  constructor()\n  {\n    super({\n      name: Sections.HOME,\n      url: SectionsURLs.HOME,\n      container: document.querySelector('.home')\n    });\n  }\n\n  start()\n  {\n  }\n\n  update()\n  {\n  }\n}\n","import { PerspectiveCamera } from 'ohzi-core';\nimport { CameraManager } from 'ohzi-core';\nimport { Grid } from 'ohzi-core';\nimport { Debug } from 'ohzi-core';\nimport { SceneManager } from 'ohzi-core';\nimport { Screen } from 'ohzi-core';\nimport { Graphics } from 'ohzi-core';\nimport { ResourceContainer } from 'ohzi-core';\n\nimport { Color } from 'three';\nimport { Scene } from 'three';\nimport { Mesh } from 'three';\nimport { Object3D } from 'three';\nimport { BoxGeometry } from 'three';\nimport { Shape } from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { CubeRefractionMapping } from 'three';\nimport { WebGLRenderTarget } from 'three';\nimport { HalfFloatType } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { PlaneGeometry } from 'three';\n\nimport GenericGlass from './GenericGlass';\nimport Tape from './Tape';\nimport Spacer from './Spacer';\n\nexport default class Structure extends Object3D\n{\n\n  constructor() {\n    super();\n   \n    this.rt = new WebGLRenderTarget(\n      Screen.width,\n      Screen.height,\n      {\n        type: HalfFloatType\n      }\n    );\n    this.glasses = [];\n\n    this.tapeInitial = new Tape();\n    this.tapeFinal = new Tape();\n\n    this.tapeInitial.position.z = - this.tapeInitial.width;\n\n    this.add(this.tapeInitial);\n    this.add(this.tapeFinal);\n\n    this.frg = new GenericGlass(this.rt, true);\n    this.middle_glass = new GenericGlass(this.rt);\n    this.outside_glass = new GenericGlass(this.rt);\n\n    this.spacer_middle_glass = new Spacer();\n    this.spacer_outside_glass = new Spacer();\n\n    this.add(this.frg);\n    this.add(this.middle_glass);\n    this.add(this.outside_glass);\n    this.add(this.spacer_middle_glass);\n    this.add(this.spacer_outside_glass);\n\n    this.glasses.push(this.frg);\n    this.glasses.push(this.middle_glass);\n    this.glasses.push(this.outside_glass);\n\n   \n  }\n\n  set(frg = {thickness:0, layers:[\"0:0\"]}, mg = {thickness:0, layers:[\"0:0\"]}, og = {thickness:0, layers:[\"0:0\"]}, smg = {thickness:0}, sog = {thickness:0}) {\n    if (frg.thickness === undefined) {console.warn('TODO : get a better data handling');return;};\n    const bias = 0.00005;\n    let space = bias;\n    // INITIAL TAPE ALWAYS AT 0\n    // FRG\n    this.frg.set(frg.thickness, frg.layers);\n    this.frg.position.z = space;\n    space += this.frg.width + bias;\n    // FINAL TAPE\n    \n    this.tapeFinal.set_short(sog.thickness > 0);\n    this.tapeFinal.position.z = space;\n    space += this.tapeFinal.width + bias;\n\n    // SPACER 1\n    this.spacer_middle_glass.set(smg.thickness)\n    this.spacer_middle_glass.position.z = space;\n    space += this.spacer_middle_glass.width + bias;\n    // MIDDLE GLASS\n    \n    this.middle_glass.set(mg.thickness, mg.layers);\n    this.middle_glass.position.z = space;\n    space += this.middle_glass.width + bias;\n    // SPACER 2\n    \n    this.spacer_outside_glass.set(sog.thickness)\n    this.spacer_outside_glass.position.z = space;\n    space += this.spacer_outside_glass.width + bias;\n    // OUTSIDE GLASS\n    \n    this.outside_glass.set(og.thickness, og.layers);\n    this.outside_glass.position.z = space;\n    space += this.outside_glass.width + bias;\n  }\n\n  init()\n  {\n\n  }\n\n  start()\n  {\n\n  }\n\n  update()\n  {\n    Graphics.render(SceneManager.backScene, CameraManager.current, this.rt);\n    Graphics._renderer.clear(true, true);\n\n    for (let i = 0; i < this.glasses.length; i++) {\n      this.glasses[i].update();\n    }\n\n    this.tapeInitial.update();\n    this.tapeFinal.update();\n\n\n  }\n\n\n}\n\n\n","import { SceneManager } from 'ohzi-core';\n\nimport { Mesh } from 'three';\nimport { Object3D } from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { Shape } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { BackSide } from 'three';\nimport { BoxGeometry } from 'three';\nimport { MeshBasicMaterial } from 'three';\n\nimport GlassFrontMaterial from '../materials/GlassFrontMaterial';\nimport GlassBackMaterial from '../materials/GlassBackMaterial';\nimport GlassSideMaterial from '../materials/GlassSideMaterial';\nimport GenericStructureElement from './GenericStructureElement';\n\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport AluminiumTapeMaterial from './../materials/AluminiumTapeMaterial';\n\n\nexport default class GenericGlass extends GenericStructureElement\n{\n\n  constructor(rt, with_tape) {\n    super();\n\n    const alu_tape_thickness = with_tape ? 0.002 : 0;\n    const bias = 0.0001;\n\n    const extrude = 0.01//0.02;\n    const length = 2, height = 2, cut = 1 - extrude * 2;\n    const depth = 1;\n    const shape = new Shape();\n    shape.moveTo( 0 + alu_tape_thickness,0 );\n    shape.lineTo( 0 + alu_tape_thickness, height - alu_tape_thickness - extrude * 2 );\n    shape.lineTo( length - cut, height - alu_tape_thickness - extrude * 2 );\n    shape.lineTo( (length - extrude * 2), height - alu_tape_thickness - extrude * 2 - cut );\n    shape.lineTo( (length - extrude * 2), 0 );\n    shape.lineTo( 0 + alu_tape_thickness, 0 );\n\n    const extrudeSettings = {\n      steps: 1,\n      depth: depth - extrude * 2,\n      //bevelEnabled: false,\n      bevelEnabled: true,\n      bevelThickness: extrude,\n      bevelSize: extrude,\n      bevelOffset: 0,\n      bevelSegments: 1\n    };\n\n    const main_geometry = new ExtrudeGeometry(shape, extrudeSettings );\n    main_geometry.translate(extrude + alu_tape_thickness, extrude + alu_tape_thickness + bias, extrude)\n    main_geometry.computeVertexNormals();\n    this.frontMaterial = new GlassFrontMaterial(rt);\n    this.side_material = new GlassSideMaterial(rt);\n\n    const backMaterial = new GlassBackMaterial();\n    backMaterial.transparent = true;\n\n    this.cube = new Mesh(main_geometry, [this.frontMaterial, this.side_material]);\n    //this.cube.receiveShadow = true;\n    //this.cube.castShadow = true;\n    this.cube.renderOrder = 1000;\n\n    this.frontMaterial_back = new GlassFrontMaterial(rt);\n    this.side_material_back = new GlassSideMaterial(rt);\n    this.frontMaterial_back.side = BackSide;\n    this.side_material_back.side = BackSide;\n    this.frontMaterial_back.opacity = 0.1;\n    this.side_material_back.opacity = 0.1;\n    this.frontMaterial_back.transparent = true;\n    this.side_material_back.transparent = true;\n\n    this.cube_back = new Mesh(main_geometry, [this.frontMaterial_back, this.side_material_back]);\n    //this.cube_back.receiveShadow = true;\n    //this.cube_back.castShadow = true;\n    this.cube_back.renderOrder = 10;\n\n    let back_cube = this.cube.clone();\n    back_cube.material = backMaterial;\n    this.add(this.cube);\n    this.cube.add(this.cube_back);\n\n    // for the glass to cast shadows\n    this.shadow_cube = this.cube_back.clone();\n    this.shadow_cube.material = new MeshBasicMaterial({opacity : 0, transparent: true});\n    this.shadow_cube.material.colorWrite = false;\n    this.shadow_cube.material.depthWrite = false;\n    this.shadow_cube.receiveShadow = true;\n    this.shadow_cube.castShadow = true;\n    //shadow_cube.material = backMaterial;\n\n    SceneManager.backScene.add(back_cube);\n    SceneManager.current.add(this.shadow_cube);\n\n    // alu tape around frg\n    if ( with_tape ) {\n      const alu_tape_geometry_x = new BoxGeometry(length, alu_tape_thickness, depth);\n      alu_tape_geometry_x.translate(length * 0.5, alu_tape_thickness * 0.5, depth * 0.5);\n\n      this.alu_tape = new Mesh(alu_tape_geometry_x, new AluminiumTapeMaterial());\n      this.alu_tape.receiveShadow = true;\n      this.alu_tape.castShadow = true;\n      this.alu_tape.renderOrder = 1000;\n      this.cube.add(this.alu_tape);\n\n      const alu_tape_geometry_y = new BoxGeometry(length, alu_tape_thickness, depth);\n      alu_tape_geometry_y.rotateZ(Math.PI * 0.5);\n      alu_tape_geometry_y.translate(alu_tape_thickness * 0.5, length * 0.5, depth * 0.5);\n\n      this.alu_tape_y = new Mesh(alu_tape_geometry_y, new AluminiumTapeMaterial());\n      this.alu_tape_y.receiveShadow = true;\n      this.alu_tape_y.castShadow = true;\n      this.alu_tape_y.renderOrder = 1000;\n      this.cube.add(this.alu_tape_y);\n    }\n  }\n\n  update_layers_texture(layers_array) {\n    this.side_material.update_layers_texture(layers_array);\n  }\n\n  update()\n  {\n    this.side_material.update();\n    this.frontMaterial.update();\n  }\n\n  set(width, layers) //\n  {\n    this.side_material.set(width, layers);\n    this.side_material_back.set(width, layers);\n    \n    super.set(width);\n    this.shadow_cube.scale.z = this.scale.z\n    this.shadow_cube.position.z = this.position.z\n\n  }\n\n}\n\n\n","import { BaseShaderMaterial } from 'ohzi-core';\nimport fragment from '../shaders/GlassFrontShader.frag'\nimport vertex from '../shaders/GlassFrontShader.vert'\nimport DatGui from '../components/DatGui';\nimport { ResourceContainer } from 'ohzi-core';\nimport { Screen } from 'ohzi-core';\nimport { Time } from 'ohzi-core';\n\nimport { Vector2 } from 'three';\nimport { Color } from 'three';\nimport { FrontSide } from 'three';\n\n\n\nexport default class GlassFrontMaterial extends BaseShaderMaterial\n{\n  constructor(rt)\n  {\n    super(vertex, fragment, {\n      resolution: { value :\n        new Vector2(Screen.width, Screen.height).multiplyScalar(\n          window.devicePixelRatio\n        )}\n      ,\n      backNormals: {value : rt.texture},\n      envMap: {value : ResourceContainer.get_resource(\"cube\")},\n      color: {value: new Color(0xe0e0e0)},\n      refractionIndex: {value: DatGui.settings.refractionIndex},\n      dispersion: {value: DatGui.settings.dispersion},\n      opacity: {value: DatGui.settings.opacity},\n      roughness: {value: DatGui.settings.roughness},\n      fesnel: {value: DatGui.settings.fesnel},\n      noise: {value: ResourceContainer.get_resource(\"noise\")},\n      timer: {value: 0},\n     });\n    this.side = FrontSide;\n    this.alphaTest = 0.0;\n    this.transparent = true;\n    this.needsUpdate = true;  }\n\n  update() {\n    //if(this.uniforms.timer.value !== Time.elapsed_time)\n    //  this.uniforms.timer.value = Time.elapsed_time;\n    //if(this.uniforms.refractionIndex.value !== DatGui.settings.refractionIndex)\n    //  this.uniforms.refractionIndex.value = DatGui.settings.refractionIndex;\n    //if(this.uniforms.dispersion.value !== DatGui.settings.dispersion)\n    //  this.uniforms.dispersion.value = DatGui.settings.dispersion;\n    //if(this.uniforms.roughness.value !== DatGui.settings.roughness)\n    //  this.uniforms.roughness.value = DatGui.settings.roughness;\n    //if(this.uniforms.opacity.value !== DatGui.settings.opacity)\n    //  this.uniforms.opacity.value = DatGui.settings.opacity;\n    //if(this.uniforms.fesnel.value !== DatGui.settings.fesnel)\n    //  this.uniforms.fesnel.value = DatGui.settings.fesnel;\n    //if(this.uniforms.color.value !== DatGui.settings.color)\n    //  this.uniforms.color.value.set(DatGui.settings.color);\n  }\n   \n  //set(white) {\n  //  if (white) {\n  //    this.uniforms.color.value.setHex(0xe0e0e0)\n  //  } else {\n  //    this.uniforms.color.value.setHex(0xa0e0a0)\n  //  }\n  //}\n};\n","module.exports=\"#define GLSLIFY 1\\n#define REF_WAVELENGTH 579.0\\n#define RED_WAVELENGTH 650.0\\n#define GREEN_WAVELENGTH 525.0\\n#define BLUE_WAVELENGTH 440.0\\nuniform vec2 resolution;\\nuniform sampler2D backNormals;\\nuniform sampler2D noise;\\nuniform samplerCube envMap;\\nuniform float refractionIndex;\\nuniform vec3 color;\\nuniform float dispersion;\\nuniform float roughness;\\nuniform float opacity;\\nuniform float fesnel;\\nuniform float timer;\\nvarying vec3 vWorldCameraDir;\\nvarying vec3 vWorldNormal;\\nvarying vec3 vViewNormal;\\nvarying vec3 vLightViewDirection;\\nvarying vec3 vViewPosition;\\nvarying vec2 vUV;\\n\\nvec4 refractLight(float wavelength, vec3 backFaceNormal) {\\n\\tfloat index = 1.0 / mix(refractionIndex, refractionIndex * REF_WAVELENGTH / wavelength, dispersion);\\n\\tvec3 dir = vWorldCameraDir;\\n\\tdir = refract(dir, vWorldNormal, index);\\n\\tdir = refract(dir, backFaceNormal, index);\\n\\treturn textureCube(envMap, dir);\\n}\\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\\n{\\n\\treturn F0 + (1.0 - F0) * pow(1.0 + cosTheta, 5.0);\\n}\\nvoid main() {\\n\\n\\tvec3 backFaceNormal = texture2D(backNormals, gl_FragCoord.xy / resolution).rgb;\\n\\tfloat noise = texture2D(noise, vUV.xy * 10.0 ).x;\\n\\t//float noise = texture2D(noise, (gl_FragCoord.xy / resolution) * 0.05 ).x;\\n\\tbackFaceNormal = backFaceNormal + noise * 0.01 - 0.01;\\n\\n\\tfloat r = refractLight(RED_WAVELENGTH, backFaceNormal).r;\\n\\tfloat g = refractLight(GREEN_WAVELENGTH, backFaceNormal).g;\\n\\tfloat b = refractLight(BLUE_WAVELENGTH, backFaceNormal).b;\\n\\n\\tvec3 fresnel = fresnelSchlick(dot(vec3(0.0,0.0,-1.0), vViewNormal), vec3(fesnel));\\n\\n\\tvec3 reflectedColor = textureCube(envMap, reflect(vWorldCameraDir, vWorldNormal)).rgb * clamp((1.0 - roughness) + fresnel, 0.0, 1.0);\\n\\t\\n\\t// float specular = vViewNormal * vLightViewDirection\\n\\tfloat diffuse = clamp(dot(vViewNormal, vLightViewDirection), 0.0, 1.0);\\n\\n\\tvec3 view_dir = - normalize(vViewPosition);\\n\\tfloat specular = clamp(dot(normalize(view_dir + vLightViewDirection), vViewNormal), 0.0, 1.0);\\n\\tfloat blinn = pow(specular, 10.0);\\n\\n\\tgl_FragColor.rgb = vec3(r,g,b) * color + reflectedColor;\\n\\t//gl_FragColor.rgb = vec3(vUV.xy, 0.0);\\n\\t//gl_FragColor.rgb = vec3(noise);\\n    //gl_FragColor.a = opacity;\\n    gl_FragColor.a = opacity + noise * 0.01 + (1.0 - vUV.x) * 0.1 + blinn * 0.7;\\n}\";","module.exports=\"#define GLSLIFY 1\\nvarying vec3 vWorldCameraDir;\\n  varying vec3 vWorldNormal;\\n  varying vec3 vViewNormal;\\n  varying vec3 vLightViewDirection;\\n  varying vec3 vViewPosition;\\n  varying vec2 vUV;\\n\\n  void main() {\\n    vec4 worldPosition = modelMatrix * vec4( position, 1.0);\\n    vWorldCameraDir = worldPosition.xyz - cameraPosition;\\n    vWorldCameraDir = normalize(vec3(-vWorldCameraDir.x, vWorldCameraDir.yz));\\n    vWorldNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n    vWorldNormal = normalize(vec3(-vWorldNormal.x, vWorldNormal.yz));\\n\\t\\tvViewNormal = normalize( modelViewMatrix * vec4(normal, 0.0)).xyz;\\n  \\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    vViewPosition = (modelViewMatrix * vec4(position,1.0)).xyz;\\n    vLightViewDirection = normalize( (modelViewMatrix * vec4(1.0,1.0,1.0,0.0)).xyz );\\n    vUV = uv * 0.25;\\n  }\";","import { BaseShaderMaterial } from 'ohzi-core';\nimport fragment from '../shaders/GlassBackShader.frag'\nimport vertex from '../shaders/GlassBackShader.vert'\nimport { BackSide } from 'three';\n\n\nexport default class GlassBackMaterial extends BaseShaderMaterial\n{\n  constructor()\n  {\n    super(vertex, fragment, {});\n    this.side = BackSide;\n  };\n    \n};\n","module.exports=\"#define GLSLIFY 1\\n  varying vec3 vWorldNormal;\\n  void main() {\\n    gl_FragColor.rgb = vWorldNormal;\\n  }\";","module.exports=\"#define GLSLIFY 1\\n\\n  varying vec3 vWorldNormal;\\n  void main() {\\n    vWorldNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n    vWorldNormal = -normalize(vec3(-vWorldNormal.x, vWorldNormal.yz));\\n  \\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  }\";","import { BaseShaderMaterial } from 'ohzi-core';\nimport fragment from '../shaders/GlassSideShader.frag'\nimport vertex from '../shaders/GlassFrontShader.vert'\nimport DatGui from '../components/DatGui';\nimport { ResourceContainer } from 'ohzi-core';\nimport { Screen } from 'ohzi-core';\nimport { Time } from 'ohzi-core';\n\nimport { Vector2 } from 'three';\nimport { Color } from 'three';\nimport { DoubleSide } from 'three';\nimport { BackSide } from 'three';\nimport { DataTexture } from 'three';\nimport { RGBFormat } from 'three';\nimport { RepeatWrapping } from 'three';\n\n\nexport default class GlassSideMaterial extends BaseShaderMaterial\n{\n  constructor(rt)\n  {\n    super(vertex, fragment, {\n      resolution: { value :\n        new Vector2(Screen.width, Screen.height).multiplyScalar(\n          window.devicePixelRatio\n        )}\n      ,\n      backNormals: {value : rt.texture},\n      envMap: {value : ResourceContainer.get_resource(\"cube\")},\n      color: {value: new Color(0x197f66)},\n      refractionIndex: {value: DatGui.settings.refractionIndex},\n      dispersion: {value: DatGui.settings.dispersion},\n      opacity: {value: 0.8},\n      //\n      roughness: {value: 0.9},\n      fesnel: {value: DatGui.settings.fesnel},\n      noise: {value: ResourceContainer.get_resource(\"noise\")},\n      uLayersTexture: {value: undefined},\n      timer: {value: 0},\n     });\n    this.side = DoubleSide;\n    this.transparent = true;\n    this.needsUpdate = true;\n\n    this.layer_colors = {\n      //float\n      \"0\" : {r: 0x72,g: 0xa6, b:0x92},\n      //white\n      \"1\" : {r: 0xe4,g: 0xee, b:0xea},\n      //satin\n      \"2\" : {r: 0x54,g: 0x7e, b:0x5f},\n      //gel\n      \"3\" : {r: 0xb3,g: 0xcf, b:0xc5},\n      //pvb\n      \"4\" : {r: 0x47,g: 0x6b, b:0x5d}\n    }\n  }\n\n   update_layers_texture(glass_width ,layers) {\n    // create a buffer with color data\n    // please note layers are stacked on the Y axis, so the variation is \n    // in the heigth componenet\n    const texture_width = 1;\n    const texture_height = 512;\n    // in 0.5mm\n\n    const size = texture_width * texture_height;\n    const data = new Uint8Array( 3 * size );\n\n    const layer_unit = (texture_height/glass_width);\n    let stride = 0;\n    let layers_to_units = [];\n    for ( let index = 0; index < layers.length; index ++ ) {\n      let layer_index = 0;\n      let layer_width = layers[index].split(':')[0] * layer_unit;\n      let layer_color = this.layer_colors[layers[index].split(':')[1]];\n\n      while (layer_index < layer_width) {\n        layer_index++\n        stride++;\n        data[ stride * 3 ] = layer_color.r;\n        data[ stride * 3 + 1 ] = layer_color.g;\n        data[ stride * 3 + 2 ] = layer_color.b;\n      }\n    }\n\n    const texture = new DataTexture( data, texture_width, texture_height, RGBFormat );\n    texture.wrapS = RepeatWrapping;\n    texture.wrapT = RepeatWrapping;\n    this.uniforms.uLayersTexture.value = texture;\n  }\n  update() {\n    //if(this.uniforms.timer.value !== Time.elapsed_time)\n    //  this.uniforms.timer.value = Time.elapsed_time;\n    //if(this.uniforms.refractionIndex.value !== DatGui.settings.refractionIndex)\n    //  this.uniforms.refractionIndex.value = DatGui.settings.refractionIndex;\n    //if(this.uniforms.dispersion.value !== DatGui.settings.dispersion)\n    //  this.uniforms.dispersion.value = DatGui.settings.dispersion;\n    //if(this.uniforms.roughness.value !== DatGui.settings.roughness)\n    //  this.uniforms.roughness.value = DatGui.settings.roughness;\n    //if(this.uniforms.fesnel.value !== DatGui.settings.fesnel)\n    //  this.uniforms.fesnel.value = DatGui.settings.fesnel;\n  }\n    \n  set(width, clear) {\n    this.update_layers_texture(width, clear);\n  }\n};\n","module.exports=\"#define GLSLIFY 1\\n#define REF_WAVELENGTH 579.0\\n#define RED_WAVELENGTH 650.0\\n#define GREEN_WAVELENGTH 525.0\\n#define BLUE_WAVELENGTH 440.0\\nuniform vec2 resolution;\\nuniform sampler2D backNormals;\\nuniform sampler2D noise;\\nuniform sampler2D uLayersTexture;\\nuniform samplerCube envMap;\\nuniform float refractionIndex;\\nuniform vec3 color;\\nuniform float dispersion;\\nuniform float roughness;\\nuniform float opacity;\\nuniform float fesnel;\\nuniform float timer;\\nvarying vec3 vWorldCameraDir;\\nvarying vec3 vWorldNormal;\\nvarying vec3 vViewNormal;\\nvarying vec3 vLightViewDirection;\\nvarying vec3 vViewPosition;\\nvarying vec2 vUV;\\n\\nvec4 refractLight(float wavelength, vec3 backFaceNormal, float noise) {\\n\\tfloat index = 1.0 / mix(refractionIndex, refractionIndex * REF_WAVELENGTH / wavelength, dispersion + noise * 0.2);\\n\\tvec3 dir = vWorldCameraDir;\\n\\tdir = refract(dir, vWorldNormal, index);\\n\\tdir = refract(dir, backFaceNormal, index);\\n\\treturn textureCube(envMap, dir);\\n}\\nvec3 fresnelSchlick(float cosTheta, vec3 F0)\\n{\\n\\treturn F0 + (1.0 - F0) * pow(1.0 + cosTheta, 5.0);\\n}\\nvoid main() {\\n\\n\\tvec3 backFaceNormal = texture2D(backNormals, gl_FragCoord.xy / resolution).rgb;\\n\\tfloat noise = texture2D(noise, vec2(vUV.x * 2.0 , vUV.y) * 2.0  ).x;\\n\\tvec3 color3 = texture2D(uLayersTexture, vec2(vUV.x, vUV.y / (260.0 / 1024.0) ) ).rgb;\\n\\n\\t//float noise = texture2D(noise, (gl_FragCoord.xy / resolution) * 0.5 ).x;\\n\\tbackFaceNormal = backFaceNormal + noise * 0.01 - 0.01;\\n\\n\\tfloat r = refractLight(RED_WAVELENGTH, backFaceNormal, noise).r;\\n\\tfloat g = refractLight(GREEN_WAVELENGTH, backFaceNormal, noise).g;\\n\\tfloat b = refractLight(BLUE_WAVELENGTH, backFaceNormal, noise).b;\\n\\n\\tvec3 fresnel = fresnelSchlick(dot(vec3(0.0,0.0,-1.0), vViewNormal), vec3(fesnel));\\n\\n\\tvec3 reflectedColor = textureCube(envMap, reflect(vWorldCameraDir, vWorldNormal)).rgb * clamp((1.0 - roughness) + fresnel, 0.0, 1.0);\\n\\t\\n\\tfloat diffuse = clamp(dot(vViewNormal, vLightViewDirection), 0.0, 1.0);\\n\\n\\tvec3 view_dir = - normalize(vViewPosition);\\n\\tfloat specular = clamp(dot(normalize(view_dir + vLightViewDirection), vViewNormal), 0.0, 1.0);\\n\\tfloat blinn = pow(specular, 50.0);\\n\\n\\tgl_FragColor.rgb = vec3(r,g,b) * color3 + reflectedColor * 0.3 + blinn * 0.4;\\n    gl_FragColor.a = opacity + noise * 0.05 + (1.0 - vUV.x) * 0.1 + blinn * 0.3 ;\\n}\";","import { Mesh } from 'three';\nimport { Object3D } from 'three';\n\nexport default class GenericStructureElement extends Object3D\n{\n  constructor() {\n    super();\n\n    this.cube = new Mesh();\n    this.cube.renderOrder = 999;\n  }\n\n  get width() {\n    return this.scale.z;\n  }\n\n  set(width) //\n  {\n    width *= 0.01;\n    this.scale.z = width;\n\n    if (width === 0) {\n      this.visible = false;\n    } else {\n      this.visible = true;\n    }\n  }\n\n  init()\n  {\n\n  }\n\n  start()\n  {\n\n  }\n\n  update()\n  {\n  }\n\n}\n\n\n","import { MeshPhysicalMaterial } from 'three';\nimport { ResourceContainer } from 'ohzi-core';\n\nimport DatGui from '../components/DatGui';\n\n\nexport default class AluminiumTapeMaterial extends MeshPhysicalMaterial\n{\n  constructor()\n  {\n    super({\n      color: 0xa2a2a2,\n      envMap: ResourceContainer.get_resource(\"cube-blur\"),\n      map : ResourceContainer.get_resource(\"alu-diffuse\"),\n      clearcoatNormalMap : ResourceContainer.get_resource(\"alu-normal\"),\n      roughnessMap : ResourceContainer.get_resource(\"alu-specular\"),\n      refractionRatio: 0.22,\n      roughness : 0.8,\n      metalness : 0.6,\n      reflectivity : 0.1,\n      clearcoat : 0.85,\n      clearcoatRoughness : 0.8\n    } );\n  };\n   \n  update () {\n    //this.color.setHex(DatGui.settings.color);\n    //this.refractionRatio = DatGui.settings.refractionRatio;\n    //this.roughness = DatGui.settings.roughness;\n    //this.metalness = DatGui.settings.metalness;\n    //this.reflectivity = DatGui.settings.reflectivity;\n    //this.clearcoat = DatGui.settings.clearcoat;\n    //this.clearcoatRoughness = DatGui.settings.clearcoatRoughness;\n    //this.needsUpdate = true;\n  }\n};\n","import { ResourceContainer } from 'ohzi-core';\n\nimport { Color } from 'three';\nimport { Mesh } from 'three';\nimport { Object3D } from 'three';\nimport { BoxGeometry } from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { CubeRefractionMapping } from 'three';\nimport { WebGLRenderTarget } from 'three';\nimport { HalfFloatType } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { Shape } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { RepeatWrapping } from 'three';\nimport { MeshPhysicalMaterial } from 'three';\n\nimport GenericStructureElement from './GenericStructureElement';\nimport AluminiumTapeMaterial from './../materials/AluminiumTapeMaterial';\n\n\nexport default class Tape extends GenericStructureElement\n{\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.depth = 0.002;\n\n\t\tconst length = 2, height = 2, thickness = 0.15, thickness_short = 0.03;\n\n\t\tconst geometry_y = new BoxGeometry(height - thickness, thickness, this.depth);\n\t\tgeometry_y.rotateZ(0.5 * Math.PI);\n\t\tgeometry_y.translate(thickness * 0.5, (height + thickness) * 0.5, this.depth * 0.5);\n\n\t\tconst geometry_x = new BoxGeometry(length, thickness, this.depth);\n\t\tgeometry_x.translate(length * 0.5, thickness * 0.5, this.depth * 0.5);\n\t\t\n\t\t//short geo\n\t\tconst geometry_y_short = new BoxGeometry(height - thickness_short, thickness_short, this.depth);\n\t\tgeometry_y_short.rotateZ(0.5 * Math.PI);\n\t\tgeometry_y_short.translate(thickness_short * 0.5, (height + thickness_short) * 0.5, this.depth * 0.5);\n\t\t\n\t\tconst geometry_x_short = new BoxGeometry(length, thickness_short, this.depth);\n\t\tgeometry_x_short.translate(length * 0.5, thickness_short * 0.5, this.depth * 0.5);\n\n\t\tconst alu_material = new AluminiumTapeMaterial();\n\t\tthis.alu_material = alu_material;\n\t\t\n\t\tthis.cube_y = new Mesh(geometry_y, alu_material);\n\t\tthis.cube_y.receiveShadow = true;\n\t\tthis.cube_y.castShadow = true;\n\t\tthis.cube_y.renderOrder = 1001;\n\t\tthis.add(this.cube_y);\n\n\t\tthis.cube_x = new Mesh(geometry_x, alu_material);\n\t\tthis.cube_x.receiveShadow = true;\n\t\tthis.cube_x.castShadow = true;\n\t\tthis.cube_x.renderOrder = 1001;\n\t\tthis.add(this.cube_x);\n\n\t\t// short alu tape\n\t\tthis.cube_y_short = new Mesh(geometry_y_short, alu_material);\n\t\tthis.cube_y_short.receiveShadow = true;\n\t\tthis.cube_y_short.castShadow = true;\n\t\tthis.cube_y_short.renderOrder = 1001;\n\t\tthis.add(this.cube_y_short);\n\n\t\tthis.cube_x_short = new Mesh(geometry_x_short, alu_material);\n\t\tthis.cube_x_short.receiveShadow = true;\n\t\tthis.cube_x_short.castShadow = true;\n\t\tthis.cube_x_short.renderOrder = 1001;\n\t\tthis.add(this.cube_x_short);\n\n\t\tthis.set_short(false);\n\t}\n \t\n \tset_short(aBoolean) {\n \t\tif (aBoolean) {\n \t\t\tthis.cube_y_short.visible = true;\n\t\t\tthis.cube_x_short.visible = true;\n\t \t\tthis.cube_y.visible = false;\n\t\t\tthis.cube_x.visible = false;\n\t\t} else {\n\t\t \tthis.cube_y_short.visible = false;\n\t\t\tthis.cube_x_short.visible = false;\n\t \t\tthis.cube_y.visible = true;\n\t\t\tthis.cube_x.visible = true;\t\n\t\t}\n\n \t}\n\n \tupdate() {\n \t\tthis.alu_material.update()\n \t}\n\n \tget width() {\n    \treturn this.depth;\n  \t}\n}\n\n\n","import { ResourceContainer } from 'ohzi-core';\n\nimport { Color } from 'three';\nimport { Mesh } from 'three';\nimport { Object3D } from 'three';\nimport { BoxGeometry } from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { CubeRefractionMapping } from 'three';\nimport { WebGLRenderTarget } from 'three';\nimport { HalfFloatType } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { Shape } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { RepeatWrapping } from 'three';\nimport { MeshPhysicalMaterial } from 'three';\nimport { MeshBasicMaterial } from 'three';\n\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport GenericStructureElement from './GenericStructureElement';\nimport AluminiumTapeMaterial from './../materials/AluminiumTapeMaterial';\nimport InsulationMaterial from './../materials/InsulationMaterial';\n\nimport SpacerSegment from './SpacerSegment';\nimport SpacerCorner from './SpacerCorner';\n\nexport default class Spacer extends GenericStructureElement\n{\n\n\tconstructor(rt) {\n\t\tsuper();\n\n\t\tthis.depth = 1;\n\n\t\tconst length = 2, thickness = 0.1;\n\t\tconst length_horizontal = length - thickness;\n\t\t// in decimeters\n\t\tconst alu_thickness = 0.01;\n\t\tconst alu_vertical = 0.04 - alu_thickness;\n\t\tconst alu_sides = 0.0192;\n\t\tconst alu_variable = 1.0;\n\n\t\t\n\t\tthis.corner_segment = new SpacerCorner();\n\t\tthis.add(this.corner_segment);\n\n\t\tthis.bottom_segment = new SpacerSegment(length - thickness);\n\t\tthis.bottom_segment.position.x = thickness;\n\t\tthis.add(this.bottom_segment);\n\n\t\tthis.top_segment = new SpacerSegment(length - thickness);\n\t\tthis.top_segment.rotation.z = -Math.PI * 0.5;\n\t\tthis.top_segment.rotation.x = Math.PI;\n\t\tthis.top_segment.position.y = thickness;\n\t\tthis.top_segment.position.z = this.depth * 0.5;\n\t\tthis.add(this.top_segment);\n\n\t\t//this.top_segment.receiveShadow = true;\n    \t//this.top_segment.castShadow = true;\n\n    \t//this.bottom_segment.receiveShadow = true;\n    \t//this.bottom_segment.castShadow = true;\n\t}\n\n\tset(width)\n\t{\t\n\t\twidth *= .01;\n\t\tthis.depth = width;\n\t\tif (width === 0) {\n\t\t\tthis.visible = false;\n\t\t} else {\n\t\t\t//let ratio =  (((this.depth * 0.9 )) * width) * 50   0.05 / ;\n\t\t\tthis.visible = true;\n\t\t\tthis.bottom_segment.set(width * 100)\n\t\t\tthis.top_segment.set(width * 100)\n\t\t\tthis.corner_segment.set(width * 100)\n\t\t\tthis.top_segment.position.z = this.depth;\n\t\t}\n\t}\n\n\tget width() {\n\t\treturn this.depth;\n\t}\n\n\tupdate() {\n\t\t//this.alu_material.update()\n\t}\n}\n\n\n","import { BaseShaderMaterial } from 'ohzi-core';\nimport fragment from '../shaders/InsulationShader.frag'\nimport vertex from '../shaders/InsulationShader.vert'\nimport { ResourceContainer } from 'ohzi-core';\n\nimport { Vector2 } from 'three';\n\nexport default class InsulationMaterial extends BaseShaderMaterial\n{\n  constructor(rt)\n  {\n    super(vertex, fragment, {\n      uSize: { value :\n        new Vector2(1, 1)}\n      ,\n      uMap: {value : ResourceContainer.get_resource(\"styrofoam-diffuse3\")},\n      envMap: {value : ResourceContainer.get_resource(\"cube\")},\n     });\n    this.transparent = true;\n    this.needsUpdate = true;  }\n\n  update() {\n  }\n   \n  set_size(width, height) {\n    this.uniforms.uSize.value.set(width, height);\n    this.needsUpdate = true;\n  }\n};\n","module.exports=\"#define GLSLIFY 1\\nuniform vec2 uSize;\\nuniform sampler2D uMap;\\nuniform samplerCube envMap;\\nvarying vec3 vWorldNormal;\\nvarying vec3 vViewNormal;\\nvarying vec2 vUV;\\nvarying vec3 vWorldCameraDir;\\n\\nvoid main() {\\n\\n\\tvec4 reflectedColor = textureCube(envMap, reflect(vWorldCameraDir, vWorldNormal)) * 0.1;\\n\\t\\n\\tvec4 diffuse = texture2D(uMap, vUV.xy + vec2(0.0, .1) );\\n\\n\\tgl_FragColor = diffuse + reflectedColor;\\n}\";","module.exports=\"#define GLSLIFY 1\\nuniform vec2 uSize;\\nuniform sampler2D uMap;\\nuniform samplerCube envMap;\\nvarying vec3 vWorldNormal;\\nvarying vec3 vWorldCameraDir;\\nvarying vec3 vViewNormal;\\nvarying vec2 vUV;\\n\\nvoid main() {\\n  \\tvec4 worldPosition = modelMatrix * vec4( position, 1.0);\\n  \\tvWorldNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n  \\tvWorldNormal = normalize(vec3(-vWorldNormal.x, vWorldNormal.yz));\\n  \\tvWorldCameraDir = worldPosition.xyz - cameraPosition;\\n    vWorldCameraDir = normalize(vec3(-vWorldCameraDir.x, vWorldCameraDir.yz));\\n\\tvViewNormal = normalize( modelViewMatrix * vec4(normal, 0.0)).xyz;\\n  \\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n  \\tvUV = uv * uSize;\\n}\";","import { ResourceContainer } from 'ohzi-core';\n\nimport { Mesh } from 'three';\nimport { BoxGeometry } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { Shape } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { MeshPhysicalMaterial } from 'three';\n\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport GenericStructureElement from './GenericStructureElement';\nimport InsulationMaterial from './../materials/InsulationMaterial';\n\nexport default class SpacerSegment extends GenericStructureElement\n{\n\n\tconstructor(length) {\n\t\tsuper();\n\n\t\tthis.depth = 1;\n\n\t\tconst thickness = 0.1;\n\t\t// in decimeters\n\t\tconst alu_thickness = 0.01;\n\t\tconst alu_vertical = 0.04 - alu_thickness;\n\t\tconst alu_sides = 0.0192;\n\n\t\tconst alu_diagonal = Math.sqrt(Math.pow(alu_sides,2) + Math.pow(alu_sides,2));;\n\t\tconst height_tilted_alu_thickness = Math.cos(0.25 * Math.PI) * alu_thickness;\n\t\tconst height_tilted_alu_diagonal = Math.cos(0.25 * Math.PI) * alu_diagonal;\n\t\tthis.alu_sides = alu_sides;\n\n\t\tconst geometry_left_vertical = new BoxGeometry(length, alu_vertical, alu_thickness);\n\t\tconst geometry_right_vertical = new BoxGeometry(length, alu_vertical, alu_thickness);\n\t\tgeometry_left_vertical.translate(length * 0.5, - alu_vertical * 0.5, alu_thickness * 0.5);\n\t\tgeometry_right_vertical.translate(length * 0.5, - alu_vertical * 0.5, -alu_thickness * 0.5 + alu_sides);\n\n\t\tconst geometry_left_diagonal = new BoxGeometry(length, alu_diagonal, alu_thickness);\n\t\tconst geometry_right_diagonal = new BoxGeometry(length, alu_diagonal, alu_thickness);\n\t\tgeometry_left_diagonal.rotateX(-0.25 * Math.PI);\n\t\tgeometry_right_diagonal.rotateX(0.25 * Math.PI);\n\t\tgeometry_left_diagonal.translate(length * 0.5, -alu_vertical - height_tilted_alu_diagonal * 0.5 + height_tilted_alu_thickness * 0.5, height_tilted_alu_diagonal * 0.5 + height_tilted_alu_thickness * 0.5);\n\t\tgeometry_right_diagonal.translate(length * 0.5, -alu_vertical - height_tilted_alu_diagonal * 0.5 + height_tilted_alu_thickness * 0.5, height_tilted_alu_diagonal * 0.5 - height_tilted_alu_thickness * 0.5);\n\n\t\tconst geometry_left_side = new BoxGeometry(length, alu_thickness, alu_sides);\n\t\tconst geometry_right_side = new BoxGeometry(length, alu_thickness, alu_sides);\n\t\tgeometry_left_side.translate(length * 0.5, alu_thickness * 0.5, alu_sides * 0.5);\n\t\tgeometry_right_side.translate(length * 0.5, alu_thickness * 0.5, alu_sides * 0.5);\n\n\t\tconst side_left = BufferGeometryUtils.mergeBufferGeometries([\n\t\t\tgeometry_left_vertical,\n\t\t\tgeometry_left_diagonal,\n\t\t\tgeometry_left_side,\n\t\t\t])\n\n\t\tconst side_right = BufferGeometryUtils.mergeBufferGeometries([\n\t\t\tgeometry_right_vertical,\n\t\t\tgeometry_right_diagonal,\n\t\t\tgeometry_right_side\n\t\t\t])\n\n\t\tside_left.translate(0, -alu_thickness, -this.alu_sides * 2);\n\t\tside_right.translate(0, -alu_thickness, -this.alu_sides * 2);\n\n\t\tconst geometry_up_horizontal = new BoxGeometry(length, alu_thickness, this.depth);\n\t\tconst geometry_down_horizontal = new BoxGeometry(length, alu_thickness, this.depth);\n\n\t\tgeometry_up_horizontal.translate(length * 0.5, - alu_thickness * 0.5, 0);\n\t\tgeometry_down_horizontal.translate(length * 0.5, - alu_thickness * 0.5 - alu_vertical - alu_sides, 0);\n\n\t\tconst geometry_horizontal = BufferGeometryUtils.mergeBufferGeometries([\n\t\t\tgeometry_up_horizontal,\n\t\t\tgeometry_down_horizontal\n\t\t\t])\n\n\t\tside_left.translate(0,0.1,0);\n\t\tside_right.translate(0,0.1,0);\n\t\tgeometry_horizontal.translate(0,0.1,0);\n\t\t\n\t\tconst shape_main_plastic = new Shape();\n    \tshape_main_plastic.moveTo( 0, 0 );\n    \tshape_main_plastic.lineTo( 0, thickness * 0.4 );\n    \tshape_main_plastic.lineTo( this.depth, thickness * 0.4 );\n    \tshape_main_plastic.lineTo( this.depth, 0 );\n\n    \tconst number_of_cuts = 32;\n    \tfor ( let i = 0; i < number_of_cuts; i++ ) {\n    \t\tlet alpha = i / number_of_cuts;\n    \t\tshape_main_plastic.lineTo( this.depth * (1 - alpha), Math.sin(alpha * Math.PI) * 0.02 );\n    \t}\n\n    \tconst extrude_settings_main_plastic = {\n    \t  steps: 1,\n    \t  depth: length,\n    \t  bevelEnabled: false,\n    \t};\n\n    \tconst geometry_plastic_below = new ExtrudeGeometry(shape_main_plastic, extrude_settings_main_plastic );\n    \tgeometry_plastic_below.rotateY(Math.PI * 0.5);\n\t\tgeometry_plastic_below.translate(0, 0, this.depth);\n    \tgeometry_plastic_below.computeVertexNormals();\n\n\n\t\tconst plastic_material = new MeshPhysicalMaterial( {\n\t\t\troughness : 0.5,\n\t\t\tmetalness : 0.1,\n\t\t\treflectivity : 0.12,\n\t\t\tclearcoat : 0.59,\n\t\t\tclearcoatRoughness : 0.44,\n\t\t\tcolor : 0x505050\n\t\t});\n\n\t\tconst alu_material = new MeshPhysicalMaterial( {\n\t\t\troughness : 0.9,\n\t\t\tmetalness : 0.1,\n\t\t\treflectivity : 0.20,\n\t\t\tclearcoat : 0.20,\n\t\t\tclearcoatRoughness : 0.5,\n\t\t\tcolor : 0x0f0f0f\n\t\t});\n\n\t\tthis.spacer_side_left = new Mesh(side_left, alu_material);\n\t\t//this.spacer_side_left.receiveShadow = true;\n\t\tthis.spacer_side_left.castShadow = true;\n\t\tthis.spacer_side_left.renderOrder = 1001;\n\t\tthis.add(this.spacer_side_left);\n\n\t\tthis.spacer_side_right = new Mesh(side_right, alu_material);\n\t\t//this.spacer_side_right.receiveShadow = true;\n\t\tthis.spacer_side_right.castShadow = true;\n\t\tthis.spacer_side_right.renderOrder = 1001;\n\t\tthis.add(this.spacer_side_right);\n\n\t\tthis.spacer_horizontal = new Mesh(geometry_horizontal, alu_material);\n\t\t//this.spacer_horizontal.receiveShadow = true;\n\t\tthis.spacer_horizontal.castShadow = true;\n\t\tthis.spacer_horizontal.renderOrder = 1001;\n\t\tthis.add(this.spacer_horizontal);\n\n\t\tthis.spacer_plastic_below = new Mesh(geometry_plastic_below, plastic_material);\n\t\t//this.spacer_plastic_below.receiveShadow = true;\n\t\tthis.spacer_plastic_below.castShadow = true;\n\t\tthis.spacer_plastic_below.renderOrder = 1001;\n\t\tthis.add(this.spacer_plastic_below);\n\n\t\tconst shape = new Shape();\n    \tshape.moveTo( alu_sides, alu_sides );\n    \tshape.lineTo( alu_sides, 0 );\n    \tshape.lineTo( 0, 0 );\n\n    \tconst extrudeSettings = {\n    \t  steps: 1,\n    \t  depth: length,\n    \t  bevelEnabled: false,\n    \t};\n\n    \tconst triangle_geometry = new ExtrudeGeometry(shape, extrudeSettings );\n    \ttriangle_geometry.rotateY(Math.PI * 0.5);\n    \ttriangle_geometry.translate(0, thickness * 0.4, 0);\n    \ttriangle_geometry.computeVertexNormals();\n\n    \tthis.triangle_left = new Mesh(triangle_geometry, plastic_material);\n    \tthis.triangle_left.position.z = -alu_sides;\n\t\tthis.triangle_left.castShadow = true;\n\t\tthis.triangle_left.renderOrder = 1001;\n\t\tthis.spacer_side_left.add(this.triangle_left);\n\n\t\tthis.triangle_right = new Mesh(triangle_geometry, plastic_material);\n\t\t//this.triangle_right.rotation.y = Math.PI;\n    \tthis.triangle_right.position.z = -alu_sides * 2;\n\t\tthis.triangle_right.scale.z = -1;\n\t\tthis.triangle_right.castShadow = true;\n\t\tthis.triangle_right.renderOrder = 1001;\n\t\tthis.spacer_side_right.add(this.triangle_right);\n\n\t\tthis.styrofoam_material = new InsulationMaterial();\n\t\t\n\t\tconst geometry_styrofoam = new PlaneGeometry(this.depth * 0.9, thickness * 0.5);\n\t\tgeometry_styrofoam.rotateY(Math.PI * 0.5);\n\n\t\tgeometry_styrofoam.translate(length - 0.01, thickness * 0.65, this.depth * 0.5);\n\n\t\tconst styrofoam = new Mesh(geometry_styrofoam, this.styrofoam_material);//this.styrofoam_material);\n\t\tthis.spacer_plastic_below.add(styrofoam);\n\t}\n\n\tset(width)\n\t{\t\n\t\twidth *= .01;\n\t\tthis.depth = width;\n\t\tif (width === 0) {\n\t\t\tthis.visible = false;\n\t\t} else {\n\t\t\t//let ratio =  (((this.depth * 0.9 )) * width) * 50   0.05 / ;\n\t\t\tlet ratio = 1.5 * ((this.depth * 0.9 ) / 0.05);\n\t\t\tthis.visible = true;\n\n\t\t\tthis.styrofoam_material.set_size((ratio * 0.25) / 1.08, 1 * 0.75);\n\t\t\tthis.spacer_horizontal.scale.z = (width) - this.alu_sides * 2;\n\t\t\tthis.spacer_plastic_below.scale.z = width;\n\t\t\tthis.spacer_horizontal.position.z = width * 0.5;\n\t\t\tthis.spacer_side_right.position.z = this.spacer_horizontal.scale.z + this.alu_sides * 3;\n\t\t\tthis.spacer_side_left.position.z = this.alu_sides * 2;\n\t\t}\n\t}\n\n\tget width() {\n\t\treturn this.depth;\n\t}\n\n\tupdate() {\n\t\t//this.alu_material.update()\n\t}\n}\n\n\n","import { ResourceContainer } from 'ohzi-core';\n\nimport { Mesh } from 'three';\nimport { BoxGeometry } from 'three';\nimport { ShadowMaterial } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { Shape } from 'three';\nimport { ExtrudeGeometry } from 'three';\nimport { MeshPhysicalMaterial } from 'three';\n\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport GenericStructureElement from './GenericStructureElement';\n\nexport default class SpacerCorner extends GenericStructureElement\n{\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.depth = 1;\n\n\t\tconst thickness = 0.1;\n\t\t// in decimeters\n\t\tconst alu_thickness = 0.01;\n\t\tconst alu_vertical = 0.04 - alu_thickness;\n\t\tconst alu_sides = 0.0192;\n\t\tconst alu_suplement = 0.02 - 0.0192;\n\n\t\tconst plastic_material = new MeshPhysicalMaterial( {\n\t\t\troughness : 0.5,\n\t\t\tmetalness : 0.1,\n\t\t\treflectivity : 0.12,\n\t\t\tclearcoat : 0.59,\n\t\t\tclearcoatRoughness : 0.44,\n\t\t\tcolor : 0x505050\n\t\t});\n\n\t\tconst alu_material = new MeshPhysicalMaterial( {\n\t\t\troughness : 0.9,\n\t\t\tmetalness : 0.1,\n\t\t\treflectivity : 0.20,\n\t\t\tclearcoat : 0.20,\n\t\t\tclearcoatRoughness : 0.5,\n\t\t\tcolor : 0x0f0f0f\n\t\t});\n\n\t\tconst geometry_alu = new BoxGeometry(thickness * 0.4 + alu_suplement, thickness * 0.4 + alu_suplement, this.depth);\n\t\tgeometry_alu.translate(thickness * 0.8 - alu_suplement * 0.5, thickness * 0.8 - alu_suplement * 0.5, 0)\n\t\tthis.alu = new Mesh(geometry_alu, alu_material);\n\t\t//this.spacer_horizontal.receiveShadow = true;\n\t\tthis.alu.castShadow = true;\n\t\tthis.alu.renderOrder = 1001;\n\t\tthis.add(this.alu);\n\t\t// small plastic\n\t\tconst small_plastic_top_geo = new BoxGeometry(thickness * 0.6 - alu_suplement, thickness * 0.4 + alu_suplement, this.depth);\n\t\tsmall_plastic_top_geo.translate((thickness * 0.6 - alu_suplement) * 0.5, thickness * 0.8 - alu_suplement * 0.5, this.depth * 0.5)\n    \tsmall_plastic_top_geo.computeVertexNormals();\n\n\t\tthis.small_plastic_top = new Mesh(small_plastic_top_geo, plastic_material);\n\t\tthis.small_plastic_top.castShadow = true;\n\t\tthis.small_plastic_top.renderOrder = 1001;\n\t\tthis.add(this.small_plastic_top);\n\t\t//\n\t\tconst shape_main_plastic = new Shape();\n    \tshape_main_plastic.moveTo( 0, 0 );\n    \tshape_main_plastic.lineTo( 0, thickness * 0.4 + alu_sides);\n    \tshape_main_plastic.lineTo( this.depth, thickness * 0.4 + alu_sides);\n    \tshape_main_plastic.lineTo( this.depth, 0 );\n\n    \tconst number_of_cuts = 32;\n    \tfor ( let i = 0; i < number_of_cuts; i++ ) {\n    \t\tlet alpha = i / number_of_cuts;\n    \t\tshape_main_plastic.lineTo( this.depth * (1 - alpha), Math.sin(alpha * Math.PI) * 0.02 );\n    \t}\n\n    \tconst extrude_settings_main_plastic = {\n    \t  steps: 1,\n    \t  depth: thickness,\n    \t  bevelEnabled: false,\n    \t};\n\n    \tconst geometry_plastic_below = new ExtrudeGeometry(shape_main_plastic, extrude_settings_main_plastic );\n    \tgeometry_plastic_below.rotateY(Math.PI * 0.5);\n\t\tgeometry_plastic_below.translate(0, 0, this.depth);\n    \tgeometry_plastic_below.computeVertexNormals();\n\n\t\tthis.plastic = new Mesh(geometry_plastic_below, plastic_material);\n\t\t//this.spacer_plastic_below.receiveShadow = true;\n\t\tthis.plastic.castShadow = true;\n\t\tthis.plastic.renderOrder = 1001;\n\t\tthis.add(this.plastic);\n\t}\n\n\tset(width)\n\t{\t\n\t\twidth *= .01;\n\t\tthis.depth = width;\n\t\tif (width === 0) {\n\t\t\tthis.visible = false;\n\t\t} else {\n\t\t\t//let ratio =  (((this.depth * 0.9 )) * width) * 50   0.05 / ;\n\t\t\tthis.visible = true;\n\n\t\t\tthis.alu.scale.z = width;\n\t\t\tthis.plastic.scale.z = width;\n\t\t\tthis.alu.position.z = width * 0.5;\n\t\t\tthis.small_plastic_top.scale.z = width;\n\t\t}\n\t}\n\n\tget width() {\n\t\treturn this.depth;\n\t}\n\n\tupdate() {\n\t}\n}\n\n\n","import { ResourceContainer } from 'ohzi-core';\n\nimport { Sprite } from 'three';\nimport { SpriteMaterial } from 'three';\nimport { Object3D } from 'three';\nimport { LineDashedMaterial } from 'three';\nimport { BufferGeometry } from 'three';\nimport { Float32BufferAttribute } from 'three';\nimport { Line } from 'three';\nimport { PlaneGeometry } from 'three';\nimport { MeshBasicMaterial } from 'three';\nimport { Mesh } from 'three';\nimport { sRGBEncoding } from 'three';\n\nexport default class Sun extends Object3D\n{\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst height = 1.5;\n\n\t\tconst sun_map = ResourceContainer.get_resource(\"sun\");\n\t\tconst sun_material = new SpriteMaterial( {\n\t\t\ttransparent : true, map: sun_map, color: 0xffffff, alphaTest : 0.5\n\t\t} );\n\t\tsun_material.toneMapped = false\n\t\tconst sun = new Sprite(sun_material);\n\t\tsun.scale.set(0.35, 0.35, 1);\n\t\tsun.position.y = height;\n\n\t\tconst line_material = new LineDashedMaterial( {\n\t\t\tcolor: 0xfcda02,\n\t\t\tlinewidth: 1,\n\t\t\tscale: 1,\n\t\t\tdashSize: 0.1,\n\t\t\tgapSize: 0.1,\n\t\t} );\n\n\t\t// line\n\t\tconst line_geometry = new BufferGeometry();\n\t\tconst position = [];\n\t\tconst x_pos = -0.1;\n\n\t\tposition.push(\n\t\t\t0, height - .35, x_pos * 0.1,\n\t\t\t0, 0, x_pos,\n\t\t);\n\n\t\tline_geometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\t\tconst line = new Line( line_geometry, line_material );\n\t\tline.computeLineDistances();\n\t\t//his.add(line);\n\t\tthis.add(sun);\n\n\t\tconst base_geo = new PlaneGeometry(.45,.45);\n\t\tbase_geo.rotateX(-Math.PI * 0.5);\n\t\tconst base_material = new MeshBasicMaterial({\n\t\t\ttransparent: true,\n\t\t\tcolor : 0x777777,\n\t\t\topacity : 0.5,\n\t\t\tmap : ResourceContainer.get_resource(\"blured_circle\")\n\t\t});\n\n\t\tconst base = new Mesh(base_geo, base_material);\n\t\tbase.position.z = x_pos;\n\t\t//this.add(base);\n\t}\n}\n\n\n","\nimport { BackSide } from 'three';\nimport { BoxGeometry } from 'three';\nimport { Mesh } from 'three';\nimport { ShaderMaterial } from 'three';\nimport { UniformsUtils } from 'three';\nimport { Vector3 } from 'three';\nimport { MathUtils } from 'three';\nimport DatGui from './DatGui';\n\nimport { Graphics } from 'ohzi-core';\nimport { Time } from 'ohzi-core';\n\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nexport default class Sky extends Mesh {\n\n\tconstructor() {\n\n\n\t\tconst skyShader = {\n\n\t\t\tuniforms: {\n\t\t\t\t'turbidity': { value: 2 },\n\t\t\t\t'rayleigh': { value: 1 },\n\t\t\t\t'mieCoefficient': { value: 0.005 },\n\t\t\t\t'mieDirectionalG': { value: 0.8 },\n\t\t\t\t'sunPosition': { value: new Vector3() },\n\t\t\t\t'up': { value: new Vector3( 0, 1, 0 ) }\n\t\t\t},\n\n\t\t\tvertexShader: `\n\t\t\t\tuniform vec3 sunPosition;\n\t\t\t\tuniform float rayleigh;\n\t\t\t\tuniform float turbidity;\n\t\t\t\tuniform float mieCoefficient;\n\t\t\t\tuniform vec3 up;\n\t\t\n\t\t\t\tvarying vec3 vWorldPosition;\n\t\t\t\tvarying vec3 vSunDirection;\n\t\t\t\tvarying float vSunfade;\n\t\t\t\tvarying vec3 vBetaR;\n\t\t\t\tvarying vec3 vBetaM;\n\t\t\t\tvarying float vSunE;\n\t\t\n\t\t\t\t// constants for atmospheric scattering\n\t\t\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\n\t\t\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\t\t\n\t\t\t\t// wavelength of used primaries, according to preetham\n\t\t\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\t\t\n\t\t\t\t// mie stuff\n\t\t\t\t// K coefficient for the primaries\n\t\t\t\tconst float v = 4.0;\n\t\t\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\n\t\t\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\t\t\n\t\t\t\t// earth shadow hack\n\t\t\t\t// cutoffAngle = pi / 1.95;\n\t\t\t\tconst float cutoffAngle = 1.6110731556870734;\n\t\t\t\tconst float steepness = 1.5;\n\t\t\t\tconst float EE = 1000.0;\n\t\t\n\t\t\t\tfloat sunIntensity( float zenithAngleCos ) {\n\t\t\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n\t\t\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n\t\t\t\t}\n\t\t\n\t\t\t\tvec3 totalMie( float T ) {\n\t\t\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\n\t\t\t\t\treturn 0.434 * c * MieConst;\n\t\t\t\t}\n\t\t\n\t\t\t\tvoid main() {\n\t\t\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tvWorldPosition = worldPosition.xyz;\n\t\t\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\n\t\t\n\t\t\t\t\tvSunDirection = normalize( sunPosition );\n\t\t\n\t\t\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\n\t\t\n\t\t\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\t\t\n\t\t\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\t\t\n\t\t\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t\t\t// rayleigh coefficients\n\t\t\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\n\t\t\n\t\t\t\t\t// mie coefficients\n\t\t\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\n\t\t\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: `\n\t\t\t\tvarying vec3 vWorldPosition;\n\t\t\t\tvarying vec3 vSunDirection;\n\t\t\t\tvarying float vSunfade;\n\t\t\t\tvarying vec3 vBetaR;\n\t\t\t\tvarying vec3 vBetaM;\n\t\t\t\tvarying float vSunE;\n\t\t\n\t\t\t\tuniform float mieDirectionalG;\n\t\t\t\tuniform vec3 up;\n\t\t\n\t\t\t\tconst vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );\n\t\t\n\t\t\t\t// constants for atmospheric scattering\n\t\t\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\t\t\n\t\t\t\tconst float n = 1.0003; // refractive index of air\n\t\t\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\t\t\n\t\t\t\t// optical length at zenith for molecules\n\t\t\t\tconst float rayleighZenithLength = 8.4E3;\n\t\t\t\tconst float mieZenithLength = 1.25E3;\n\t\t\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\t\t\n\t\t\t\t// 3.0 / ( 16.0 * pi )\n\t\t\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n\t\t\t\t// 1.0 / ( 4.0 * pi )\n\t\t\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\n\t\t\n\t\t\t\tfloat rayleighPhase( float cosTheta ) {\n\t\t\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n\t\t\t\t}\n\t\t\n\t\t\t\tfloat hgPhase( float cosTheta, float g ) {\n\t\t\t\t\tfloat g2 = pow( g, 2.0 );\n\t\t\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n\t\t\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n\t\t\t\t}\n\t\t\n\t\t\t\tvoid main() {\n\t\t\n\t\t\t\t\tvec3 direction = normalize( vWorldPosition - cameraPos );\n\t\t\n\t\t\t\t\t// optical length\n\t\t\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n\t\t\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n\t\t\t\t\tfloat sR = rayleighZenithLength * inverse;\n\t\t\t\t\tfloat sM = mieZenithLength * inverse;\n\t\t\n\t\t\t\t\t// combined extinction factor\n\t\t\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\t\t\n\t\t\t\t\t// in scattering\n\t\t\t\t\tfloat cosTheta = dot( direction, vSunDirection );\n\t\t\n\t\t\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n\t\t\t\t\tvec3 betaRTheta = vBetaR * rPhase;\n\t\t\n\t\t\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\n\t\t\t\t\tvec3 betaMTheta = vBetaM * mPhase;\n\t\t\n\t\t\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n\t\t\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\t\t\n\t\t\t\t\t// nightsky\n\t\t\t\t\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]\n\t\t\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]\n\t\t\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n\t\t\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\n\t\t\n\t\t\t\t\t// composition + solar disc\n\t\t\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n\t\t\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\t\t\n\t\t\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\t\t\n\t\t\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\t\t\n\t\t\t\t\tgl_FragColor = vec4( retColor, 1.0 );\n\t\t\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <encodings_fragment>\n\t\t\t\t}`\n\t\t};\n\n\t\tconst shader = skyShader;\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tname: 'SkyShader',\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tsuper( new BoxGeometry( 1, 1, 1 ), material );\n\n\t\tthis.isSky = true;\n\t\tthis.sun = new Vector3();\n\n\n\t\tconst uniforms = this.material.uniforms;\n\t\tconst effectController = DatGui.settings;\n\t\tuniforms[ 'turbidity' ].value = effectController.turbidity;\n\t\tuniforms[ 'rayleigh' ].value = effectController.rayleigh;\n\t\tuniforms[ 'mieCoefficient' ].value = effectController.mieCoefficient;\n\t\tuniforms[ 'mieDirectionalG' ].value = effectController.mieDirectionalG;\n\n\t\tconst phi = MathUtils.degToRad( 90 - effectController.elevation );\n\t\tconst theta = MathUtils.degToRad( effectController.azimuth );\n\t\tthis.sun.setFromSphericalCoords( 1, phi, theta );\n\n\t\tuniforms[ 'sunPosition' ].value.copy( this.sun );\n\n\t}\n\n\tupdate() {\n\t\tconst uniforms = this.material.uniforms;\n\t\tconst effectController = DatGui.settings;\n\t\tuniforms[ 'turbidity' ].value = effectController.turbidity;\n\t\tuniforms[ 'rayleigh' ].value = effectController.rayleigh;\n\t\tuniforms[ 'mieCoefficient' ].value = effectController.mieCoefficient;\n\t\tuniforms[ 'mieDirectionalG' ].value = effectController.mieDirectionalG;\n\n\t\tconst phi = MathUtils.degToRad( 90 - effectController.elevation );\n\t\tconst theta = MathUtils.degToRad( effectController.azimuth );\n\t\tthis.sun.setFromSphericalCoords( 1, phi, theta );\n\n\n\t\tuniforms[ 'sunPosition' ].value.copy( this.sun );\n\t\tGraphics._renderer.toneMappingExposure = effectController.exposure;\n\t\t\n\t}\n}\n\n"],"names":[],"version":3,"file":"index.module.js.map"}